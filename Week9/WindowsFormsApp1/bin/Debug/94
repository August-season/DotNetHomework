<!DOCTYPE html>
<html lang="zh-cn">
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <meta name="referrer" content="origin-when-crossorigin" />
    <meta name="description" content="用c&#x2B;&#x2B;写的一个基金业绩分析工具" />
    <meta property="og:description" content="用c&#x2B;&#x2B;写的一个基金业绩分析工具" />
    <meta http-equiv="Cache-Control" content="no-transform" />
    <meta http-equiv="Cache-Control" content="no-siteapp" />
    <meta http-equiv="X-UA-Compatible" content="IE=edge" />
    <title>写了一个工具分析基金回撤，分享实现过程 - 皇家救星 - 博客园</title>
    <link id="favicon" rel="shortcut icon" href="//common.cnblogs.com/favicon.svg" type="image/svg+xml" />
    
    <link rel="stylesheet" href="/css/blog-common.min.css?v=6tvK5XC6GPbg3p_sy7wzz_2291HoYACr4440iKBzQIw" />
    <link id="MainCss" rel="stylesheet" href="/skins/simpleblue/bundle-simpleblue.min.css?v=2hjghzSZyhYA1HxvSxKnXih3JbC120DBjeO9V9T_nSs" />
    
    <link id="mobile-style" media="only screen and (max-width: 767px)" type="text/css" rel="stylesheet" href="/skins/simpleblue/bundle-simpleblue-mobile.min.css?v=3tvwgOOqUo3RpS6gGzEdK0LbptOPv4Bx7M85_UAnFGs" />
    
    <link type="application/rss+xml" rel="alternate" href="https://www.cnblogs.com/kingstarer/rss" />
    <link type="application/rsd+xml" rel="EditURI" href="https://www.cnblogs.com/kingstarer/rsd.xml" />
    <link type="application/wlwmanifest+xml" rel="wlwmanifest" href="https://www.cnblogs.com/kingstarer/wlwmanifest.xml" />
    <script>
        var currentBlogId = 234136;
        var currentBlogApp = 'kingstarer';
        var cb_enable_mathjax = false;
        var isLogined = false;
        var isBlogOwner = false;
        var skinName = 'SimpleBlue';
        var visitorUserId = '';
    </script>
        <script>
            var currentPostDateAdded = '2019-05-19 01:30';
        </script>
    <script src="https://common.cnblogs.com/scripts/jquery-2.2.0.min.js"></script>
    <script src="/js/blog-common.min.js?v=ZUvfwhWs5fv-s8Nv7WofCOhwKAxiDO928zdWFzhnOPk"></script>
    
    
    
</head>
<body class="has-navbar has-bannerbar">
    <a name="top"></a>
            <a target="_blank" href="https://cloud.baidu.com/campaign/2021mid/index.html?track=cp:bokeyuan|pf:pc|pp:bokeyuan-huodong-21nianzhongdacu-neiyePCtonglanbanner|pu:21nianzhongdacu-neiyePCtonglanbanner|ci:21nzdc|kw:10224545" onclick="ga('send', 'event', 'Link', 'click', 'baidu-cpa-blog-bannerbar-pc')">
                <div class="bannerbar aliyun forpc" style="background-size: contain; filter: brightness(0.95); background-image: url(https://img2020.cnblogs.com/blog/35695/202106/35695-20210610183724605-1725070929.jpg)">
                </div>
            </a>
            <div id="bannerbar" class="bannerbar-mobile formobile">
            <a href="https://cloud.baidu.com/campaign/2021mid/index.html?track=cp:bokeyuan|pf:mb|pp:bokeyuan-huodong-21nianzhongdacu-neiyeyidongduantonglanbanner|pu:21nianzhongdacu-neiyeyidongduantonglanbanner|ci:21nzdc|kw:10224547" onclick="ga('send', 'event', 'Link', 'click', 'baidu-cpa-blog-bannerbar-mobile')">
                <img src="https://img2020.cnblogs.com/blog/35695/202106/35695-20210610184806729-1738888164.jpg" alt="" />
            </a>
            </div>
    <div id="top_nav" class="navbar forpc">
        <nav id="nav_main" class="navbar-main">
            <ul id="nav_left" class="navbar-list navbar-left">
                <li class="navbar-branding"><a href="https://www.cnblogs.com/" title="开发者的网上家园"><img src="/images/logo.svg?v=R9M0WmLAIPVydmdzE2keuvnjl-bPR7_35oHqtiBzGsM" alt="博客园Logo" /></a></li>
                <li><a href="/" onclick="ga('send', 'event', 'Link', 'click', 'skin-navbar-sitehome')">首页</a></li>
                <li><a href="https://news.cnblogs.com/" onclick="ga('send', 'event', 'Link', 'click', 'skin-navbar-news')">新闻</a></li>
                <li><a href="https://q.cnblogs.com/" onclick="ga('send', 'event', 'Link', 'click', 'skin-navbar-q')">博问</a></li>
                <li><a id="nav_brandzone" href="https://brands.cnblogs.com/" onclick="ga('send', 'event', 'Link', 'click', 'skin-navbar-brands')">专区</a></li>
                <li><a href="https://ing.cnblogs.com/" onclick="ga('send', 'event', 'Link', 'click', 'skin-navbar-ing')">闪存</a></li>
                <li><a href="https://edu.cnblogs.com/" onclick="ga('send', 'event', 'Link', 'click', 'skin-navbar-edu')">班级</a></li>
            </ul>
            <ul id="nav_right" class="navbar-list navbar-right">
                <li>
                    <form id="zzk_search" class="navbar-search" action="https://zzk.cnblogs.com/s" method="get">
                        <input name="w" id="zzk_search_input" placeholder="代码改变世界" type="text" tabindex="3" />
                        <button type="submit" id="zzk_search_button">
                            <img src="/images/aggsite/search.svg" alt="搜索" />
                        </button>
                    </form>
                </li>
                <li id="navbar_login_status" class="navbar-list">
                    <a class="navbar-user-info navbar-blog" href="https://i.cnblogs.com/EditPosts.aspx?opt=1" alt="写随笔" title="写随笔">
                        <img id="new_post_icon" class="navbar-icon" src="/images/aggsite/newpost.svg" alt="写随笔" />
                    </a>
                    <a id="navblog-myblog-icon" class="navbar-user-info navbar-blog" href="https://passport.cnblogs.com/GetBlogApplyStatus.aspx" alt="我的博客" title="我的博客">
                        <img id="myblog_icon" class="navbar-icon" src="/images/aggsite/myblog.svg" alt="我的博客" />
                    </a>
                    <a class="navbar-user-info navbar-message navbar-icon-wrapper" href="https://msg.cnblogs.com/" alt="短消息" title="短消息">
                        <img id="msg_icon" class="navbar-icon" src="/images/aggsite/message.svg?v=J0WS2P2iPgaIVgXxcAhliw4AFZIpaTWxtdoNAv9eiCA" alt="短消息" />
                        <span id="msg_count" style="display: none"></span>
                    </a>
                    <div id="user_info" class="navbar-user-info dropdown">
                        <a class="dropdown-button" href="https://home.cnblogs.com/">
                            <img id="user_icon" class="navbar-avatar" src="/images/aggsite/avatar-default.svg" alt="用户头像" />
                        </a>
                        <div class="dropdown-menu">
                            <a id="navblog-myblog-text" href="https://passport.cnblogs.com/GetBlogApplyStatus.aspx">我的博客</a>
                            <a href="https://home.cnblogs.com/">我的园子</a>
                            <a href="https://account.cnblogs.com/settings/account">账号设置</a>
                            <a href="javascript:void(0)" id="navbar_lite_mode_toggle" title="简洁模式会使用简洁款皮肤显示所有博客">
    简洁模式 <img id="navbar_lite_mode_on" src="/images/lite-mode-check.svg" class="hide" /><span id="navbar_lite_mode_spinner" class="hide">...</span>
</a>
                            <a href="javascript:void(0)" onclick="account.logout();">退出登录</a>
                        </div>
                    </div>
                    <a class="navbar-anonymous" href="https://account.cnblogs.com/signup/">注册</a>
                    <a class="navbar-anonymous" href="javascript:void(0);" onclick="account.login()">登录</a>
                </li>
            </ul>
        </nav>
    </div>

    
    <div id="home">
    <div id="header">
        <div id="blogTitle">
            <div class="title"><a id="Header1_HeaderTitle" class="headermaintitle HeaderMainTitle" href="https://www.cnblogs.com/kingstarer/">皇家救星</a>
</div>
<div class="subtitle"></div>

        </div>
        <div id="navigator">
            
<ul id="navList">
    <li id="nav_sitehome"><a id="blog_nav_sitehome" class="menu" href="https://www.cnblogs.com/">
博客园</a>
</li>
    <li id="nav_myhome">
<a id="blog_nav_myhome" class="menu" href="https://www.cnblogs.com/kingstarer/">
首页</a>
</li>
    <li id="nav_newpost">

<a id="blog_nav_newpost" class="menu" href="https://i.cnblogs.com/EditPosts.aspx?opt=1">
新随笔</a>
</li>
    <li id="nav_contact">
<a id="blog_nav_contact" class="menu" href="https://msg.cnblogs.com/send/%E7%9A%87%E5%AE%B6%E6%95%91%E6%98%9F">
联系</a></li>
    <li id="nav_rss">
<a id="blog_nav_rss" class="menu" href="javascript:void(0)" data-rss="https://www.cnblogs.com/kingstarer/rss/">
订阅</a></li>
    <li id="nav_admin">
<a id="blog_nav_admin" class="menu" href="https://i.cnblogs.com/">
管理</a>
</li>
</ul>

            <div class="blogStats">
                <div id="blog_stats_place_holder"><script>loadBlogStats();</script></div>
            </div>
        </div>
    </div>
    <div id="main">
        <div id="mainContent">
            <div class="forFlow">
                <div id="post_detail">
    <div id="topics">
        <div class="post">
            <h1 class="postTitle">
                
<a id="cb_post_title_url" class="postTitle2 vertical-middle" href="https://www.cnblogs.com/kingstarer/p/10887954.html">
    <span>写了一个工具分析基金回撤，分享实现过程</span>
    



</a>

            </h1>
            <div class="clear"></div>
            <div class="postBody">
                    <div id="cnblogs_post_description" style="display: none">
        用c++写的一个基金业绩分析工具
    </div>
<div id="cnblogs_post_body" class="blogpost-body blogpost-body-html">
<p>　　最近有一个网友让我帮他写一个工具分析基金回撤情况，前几天项目比较忙就直没动手，今天晚上有点时间，研究了一下。</p>
<p>先把今天的研究成果分享：</p>
<p>　　要分析基金净值回撤，首先肯定要有基金的净值变化数据。要抓数据肯定是到天天基金网上抓，毕竟人家是专业机构。</p>
<p>我找了一只个人比较喜欢的基金，易方达中小盘混合 (110011)，在天天基金网站上很容易找到它的历史净值页面：</p>
<p>　　http://fundf10.eastmoney.com/jjjz_110011.html</p>
<p>　　因为之前抓过天天基金当日基金净值数据，知道它的页面数据是藏在js里面，在浏览器访问页面后，执行js从服务器动态获取再展示到浏览器。</p>
<p>　　要知道是哪个js脚本，方法有很多。我用的是谷歌浏览器自带的开发者工具，如下图：</p>
<p><img src="https://img2018.cnblogs.com/blog/781609/201905/781609-20190519011952740-1306588842.png" alt=""></p>
<p>　　打开开发者工具的情况下浏览基金净值页面，就看到该页面访问的所有资源网址。数据比较乱，不过关心的只是js，所以按类型排了序。不过可以看出来访问的js也不少，暂时还不好知道是哪一个js包含我要的数据。</p>
<p>　　由于默认只显示了第一页数据，所以我就随意点了其它页净值，从访问的资源列表变化情况，很容易发现想要的js网址，如图</p>
<p><img src="https://img2018.cnblogs.com/blog/781609/201905/781609-20190519011344621-1322455704.png" alt=""></p>
<p>　　把这些带有callback的js网址拷下来，如下：</p>
<p>http://api.fund.eastmoney.com/f10/lsjz?callback=jQuery183018519977574130597_1558194911277&amp;fundCode=110011&amp;pageIndex=6&amp;pageSize=20&amp;startDate=&amp;endDate=&amp;_=1558195435735</p>
<p>　　从命令参数上猜测fundCode是基金代码，pageIndex是净值页面页码，其它参数暂时不知道意义。</p>
<p>　　先尝试使用这个网址在浏览器访问看是啥情况：</p>
<p><img src="https://img2018.cnblogs.com/blog/781609/201905/781609-20190519012411109-31636873.png" alt="">　　</p>
<p>　　可以看出网站对这个js访问做了控制，不让用户直接在浏览器访问。&nbsp;由于对于http抓包不大熟悉，不清楚这种情况下要怎么处理，总不至于需要写一个浏览器来抓一个js数据吧。</p>
<p>于是找了一个熟悉抓包的朋友咨询一下。咨询结果明天再说，跟下面这个请求有关。</p>
<div class="cnblogs_code">
<pre>GET /f10/lsjz?callback=jQuery183018519977574130597_1558194911277<span style="color: rgba(255, 0, 0, 1)">&amp;fundCode</span>=110011<span style="color: rgba(255, 0, 0, 1)">&amp;pageIndex</span>=4<span style="color: rgba(255, 0, 0, 1)">&amp;pageSize</span>=20<span style="color: rgba(255, 0, 0, 1)">&amp;startDate</span>=<span style="color: rgba(255, 0, 0, 1)">&amp;endDate</span>=<span style="color: rgba(255, 0, 0, 1)">&amp;_</span><span style="color: rgba(0, 0, 0, 1)">=1558195568400 HTTP/1.1
Host: api.fund.eastmoney.com
Connection: keep-alive
User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/69.0.3497.100 Safari/537.36
Accept: */*
Referer: http://fundf10.eastmoney.com/jjjz_110011.html
Accept-Encoding: gzip, deflate
Accept-Language: zh-CN,zh;q=0.9</span></pre>
</div>
<p>&nbsp;　　-----------------------------------------------</p>
<p>　　接上文，这是访问基金净值页面的http请求报文头。注意里面的Referer。百度百科上是这样说的：HTTP Referer是header的一部分，当浏览器向web服务器发送请求的时候，一般会带上Referer，告诉服务器我是从哪个页面链接过来的，服务器基此可以获得一些信息用于处理。</p>
<p>　　这里天天基金网站就是用Referer来防止别人盗链的。我直接在浏览器输入js网址，发送给服务器的请求里面的Referer是空的，但如果是在网页上点击，则Referer是网页的网址。</p>
<p>　　为了验证加上referer加上后是否能正常访问基金净值数据，我用curl做了一个试验：</p>
<div class="cnblogs_code">
<pre>curl <span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">http://api.fund.eastmoney.com/f10/lsjz?callback=jQuery183018519977574130597_1558194911277&amp;fundCode=110011&amp;pageIndex=1&amp;pageSize=300&amp;startDate=2018-01-01&amp;endDate=2018-12-31&amp;_=1558194929451</span><span style="color: rgba(128, 0, 0, 1)">"</span> --referer <span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">http://fundf10.eastmoney.com/</span><span style="color: rgba(128, 0, 0, 1)">"</span> --user-agent <span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/69.0.3497.100 Safari/537.36</span><span style="color: rgba(128, 0, 0, 1)">"</span> -o tmp.txt</pre>
</div>
<p>　　试验成功，正常获取到了净值。</p>
<p>　　-----------------------------------------------</p>
<p>　　获取基金的方法找到了，接下来再看一下js网址：http://api.fund.eastmoney.com/f10/lsjz?callback=jQuery183018519977574130597_1558194911277&amp;fundCode=110011&amp;pageIndex=6&amp;pageSize=20&amp;startDate=&amp;endDate=&amp;_=1558195435735</p>
<p>　　简单猜测，这里面的fundCode是基金代码，pageIndex是页面编号，pageSize是每页净值数量，startDate和endDate是净值日期区间，如果要获取一年的净值，可以使用</p>
<p>　　pageIndex = 1，pageSize = 300，&nbsp;startDate = 2019-01-01，endDate = 2019-12-31，用curl再试验一下，猜测得对。</p>
<p>　　接下来就是体力活了，再写一个程序循环获取每年净值，然后再进行分析就可以。</p>
<p>　　-----------------------------------------------</p>
<p>看我分析110011&nbsp;易方达中小盘的结果</p>
<p>&nbsp;<img src="https://img2018.cnblogs.com/blog/781609/201906/781609-20190608112405304-450226706.png" alt=""></p>
<p>&nbsp;　　可以看出易方达中小盘2008年成立，至今总收益是370%，也就是10年前把一万投入该基金并且设置了分红再投资，现在理论上市值有3万7。</p>
<p>在这期间买入该基金，最惨的是在2015-08-19，从那天起基金连续下跌，直到2015-08-25才开始止跌，期间总共跌幅接近15%。</p>
<p>最幸运的是在2015-07-08买入基金的投资者，他们买了后基金就一直上涨，直到涨了20%才开始回调。</p>
<p>　　今年易方达中小的业绩如下：</p>
<p>分析起止日期:[2019-01-02,2019-06-06]<br>区间回撤/上涨率:        29.92%  [2019-01-02, 2019-06-06]        [3.6184, 4.7011]<br>---------------------<br>最大连续回撤率:         -5.21%  [2019-04-30, 2019-05-06]        [5.0403, 4.7775]<br>期间最大回撤率:         -7.92%  [2019-04-10, 2019-05-09]        [5.1024, 4.6981]<br>从起始时间算最大回撤率: -1.34%  [2019-01-02, 2019-01-03]        [3.6184, 3.5699]<br>最大连续回撤天数率:     4       [2019-03-04, 2019-03-08]        [4.5156, 4.2940]<br>---------------------<br>最大连续上涨率:         9.22%   [2019-01-30, 2019-02-14]        [3.8597, 4.2157]<br>期间最大上涨率:         42.93%  [2019-01-03, 2019-04-10]        [3.5699, 5.1024]<br>从起始时间算最大上涨率: 41.01%  [2019-01-02, 2019-04-10]        [3.6184, 5.1024]<br>最大连续上涨天数率:     6       [2019-01-30, 2019-02-14]        [3.8597, 4.2157]</p>
<p>&nbsp;　　</p>
<p>　　今年基金还不错的，接近30%，最赚钱的时候是20190410，那时基金赚了41%</p>
<p>-------------------------------------------------------------<br><br></p>
<p>　　有兴趣的同学可以到这里下载我这个小工具：</p>
<p>链接: https://pan.baidu.com/s/1x7S8X5Y5tdtPPdUNI92nJA 提取码: zg97 复制这段内容后打开百度网盘手机App，操作更方便哦</p>
<p>&nbsp;</p>
<p>-------------------------------------------------------------</p>
<p>相关代码（写得比较简陋，因为想到一点写一点，以后有时间再考虑优化）</p>
<p>getRetracement.h</p>
<div class="cnblogs_code">
<pre><span style="color: rgba(0, 0, 255, 1)">#pragma</span> once<span style="color: rgba(0, 0, 0, 1)">

#include </span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">stdafx.h</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">
#include </span>&lt;stdio.h&gt;<span style="color: rgba(0, 0, 0, 1)">
#include </span>&lt;iomanip&gt;<span style="color: rgba(0, 0, 0, 1)">
typedef </span><span style="color: rgba(0, 0, 255, 1)">struct</span><span style="color: rgba(0, 0, 0, 1)"> __tagNetValueInfo{
    </span><span style="color: rgba(0, 0, 255, 1)">string</span><span style="color: rgba(0, 0, 0, 1)"> strNetValueDate;
    </span><span style="color: rgba(0, 0, 255, 1)">double</span><span style="color: rgba(0, 0, 0, 1)"> dAccumulatedNet;

    __tagNetValueInfo()
    {
        dAccumulatedNet </span>= <span style="color: rgba(128, 0, 128, 1)">0</span><span style="color: rgba(0, 0, 0, 1)">;
    }

    __tagNetValueInfo(</span><span style="color: rgba(0, 0, 255, 1)">const</span> <span style="color: rgba(0, 0, 255, 1)">string</span>&amp; v1, <span style="color: rgba(0, 0, 255, 1)">double</span><span style="color: rgba(0, 0, 0, 1)"> v2)
    {
        strNetValueDate </span>=<span style="color: rgba(0, 0, 0, 1)"> v1;
        dAccumulatedNet </span>=<span style="color: rgba(0, 0, 0, 1)"> v2;
    }
}NetValueInfo;

typedef </span><span style="color: rgba(0, 0, 255, 1)">struct</span><span style="color: rgba(0, 0, 0, 1)"> __StatisticalNetValueInfo{
    </span><span style="color: rgba(0, 0, 255, 1)">string</span><span style="color: rgba(0, 0, 0, 1)"> strValue;
    </span><span style="color: rgba(0, 0, 255, 1)">string</span><span style="color: rgba(0, 0, 0, 1)"> strNode;
    </span><span style="color: rgba(0, 0, 255, 1)">string</span><span style="color: rgba(0, 0, 0, 1)"> strBegDate;
    </span><span style="color: rgba(0, 0, 255, 1)">double</span><span style="color: rgba(0, 0, 0, 1)"> dBegNetValue;
    </span><span style="color: rgba(0, 0, 255, 1)">string</span><span style="color: rgba(0, 0, 0, 1)"> strEndDate;
    </span><span style="color: rgba(0, 0, 255, 1)">double</span><span style="color: rgba(0, 0, 0, 1)"> dEndNetValue;

    __StatisticalNetValueInfo()
    {
        dBegNetValue </span>= dEndNetValue = <span style="color: rgba(128, 0, 128, 1)">0</span><span style="color: rgba(0, 0, 0, 1)">;
        strBegDate </span>= strEndDate = <span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">-</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">;
    }

    </span><span style="color: rgba(0, 0, 255, 1)">string</span><span style="color: rgba(0, 0, 0, 1)"> getString()
    {
        </span><span style="color: rgba(0, 0, 255, 1)">string</span><span style="color: rgba(0, 0, 0, 1)"> strRet;
        </span><span style="color: rgba(0, 0, 255, 1)">char</span> buf[<span style="color: rgba(128, 0, 128, 1)">1024</span><span style="color: rgba(0, 0, 0, 1)">];
        size_t nStrNodeLen </span>= strNode.size() + <span style="color: rgba(128, 0, 128, 1)">1</span><span style="color: rgba(0, 0, 0, 1)">;
        </span><span style="color: rgba(0, 0, 255, 1)">string</span> strPad = <span style="color: rgba(128, 0, 0, 1)">""</span><span style="color: rgba(0, 0, 0, 1)">;
        </span><span style="color: rgba(0, 0, 255, 1)">for</span> (size_t i = nStrNodeLen / <span style="color: rgba(128, 0, 128, 1)">8</span>; i &lt; <span style="color: rgba(128, 0, 128, 1)">3</span>; ++<span style="color: rgba(0, 0, 0, 1)">i)
        {
            strPad </span>+= <span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">\t</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">;
        }
        _snprintf(buf, </span><span style="color: rgba(0, 0, 255, 1)">sizeof</span>(buf), <span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">%s:%s%s\t</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">,
            strNode.c_str(), strPad.c_str(), strValue.c_str());
        strRet </span>+=<span style="color: rgba(0, 0, 0, 1)"> buf;

        _snprintf(buf, </span><span style="color: rgba(0, 0, 255, 1)">sizeof</span>(buf), <span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">[%s,%s]\t</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">,
            strBegDate.c_str(), strEndDate.c_str());
        strRet </span>+=<span style="color: rgba(0, 0, 0, 1)"> buf;

        _snprintf(buf, </span><span style="color: rgba(0, 0, 255, 1)">sizeof</span>(buf), <span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">[%04f,%04f]\n</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">,
            dBegNetValue, dEndNetValue);
        strRet </span>+=<span style="color: rgba(0, 0, 0, 1)"> buf;

        </span><span style="color: rgba(0, 0, 255, 1)">return</span><span style="color: rgba(0, 0, 0, 1)"> strRet;
    }

    </span><span style="color: rgba(0, 0, 255, 1)">void</span><span style="color: rgba(0, 0, 0, 1)"> print()
    {
        size_t nStrNodeLen </span>= strNode.size() + <span style="color: rgba(128, 0, 128, 1)">1</span><span style="color: rgba(0, 0, 0, 1)">;
        </span><span style="color: rgba(0, 0, 255, 1)">string</span> strPad = <span style="color: rgba(128, 0, 0, 1)">""</span><span style="color: rgba(0, 0, 0, 1)">;
        </span><span style="color: rgba(0, 0, 255, 1)">for</span> (size_t i = nStrNodeLen / <span style="color: rgba(128, 0, 128, 1)">8</span>; i &lt; <span style="color: rgba(128, 0, 128, 1)">3</span>; ++<span style="color: rgba(0, 0, 0, 1)">i)
        {
            strPad </span>+= <span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">\t</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">;
        }
        cout </span>&lt;&lt; strNode &lt;&lt; <span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">:</span><span style="color: rgba(128, 0, 0, 1)">"</span> &lt;&lt; strPad &lt;&lt; strValue &lt;&lt; <span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">\t</span><span style="color: rgba(128, 0, 0, 1)">"</span>;<span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> &lt;&lt; endl;</span>
        cout &lt;&lt; <span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">[</span><span style="color: rgba(128, 0, 0, 1)">"</span> &lt;&lt; strBegDate &lt;&lt; <span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">, </span><span style="color: rgba(128, 0, 0, 1)">"</span> &lt;&lt; strEndDate &lt;&lt; <span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">]\t</span><span style="color: rgba(128, 0, 0, 1)">"</span>;<span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> &lt;&lt; endl;</span>
        cout.fill(<span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">0</span><span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(0, 0, 0, 1)">);
        cout </span>&lt;&lt; <span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">[</span><span style="color: rgba(128, 0, 0, 1)">"</span> &lt;&lt; <span style="color: rgba(0, 0, 255, 1)">fixed</span> &lt;&lt; setprecision(<span style="color: rgba(128, 0, 128, 1)">4</span>) &lt;&lt;<span style="color: rgba(0, 0, 0, 1)"> dBegNetValue 
            </span>&lt;&lt; <span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">, </span><span style="color: rgba(128, 0, 0, 1)">"</span>  &lt;&lt; <span style="color: rgba(0, 0, 255, 1)">fixed</span> &lt;&lt; setprecision(<span style="color: rgba(128, 0, 128, 1)">4</span>) &lt;&lt;<span style="color: rgba(0, 0, 0, 1)"> dEndNetValue 
            </span>&lt;&lt; <span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">]</span><span style="color: rgba(128, 0, 0, 1)">"</span> &lt;&lt;<span style="color: rgba(0, 0, 0, 1)"> endl;
    }
}StatisticalNetValueInfo;

typedef </span><span style="color: rgba(0, 0, 255, 1)">struct</span><span style="color: rgba(0, 0, 0, 1)"> __tagResultInfo{
    </span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">最大连续回撤率/上涨率信息</span>
<span style="color: rgba(0, 0, 0, 1)">    StatisticalNetValueInfo resMaxContinRetraceInfo;
    StatisticalNetValueInfo resMaxContinRiseInfo;

    </span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">最大连续回撤天数/上涨天数信息</span>
<span style="color: rgba(0, 0, 0, 1)">    StatisticalNetValueInfo resMaxContinRetraceDaysInfo;
    StatisticalNetValueInfo resMaxContinRiseDaysInfo;

    </span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">最大回撤率/上涨率信息</span>
<span style="color: rgba(0, 0, 0, 1)">    StatisticalNetValueInfo resMaxRetraceInfo;
    StatisticalNetValueInfo resMaxRiseInfo;

    </span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">从起始时间算最大回撤率/上涨率信息</span>
<span style="color: rgba(0, 0, 0, 1)">    StatisticalNetValueInfo resMaxRetraceFromBeginInfo;
    StatisticalNetValueInfo resMaxRiseFromBeginInfo;


    </span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">从起始时间算回撤率/上涨率信息</span>
<span style="color: rgba(0, 0, 0, 1)">    StatisticalNetValueInfo resRetraceRiseFromBeginInfo;

    __tagResultInfo()
    {
        resMaxContinRetraceInfo.strNode </span>= <span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">最大连续回撤率</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">;
        resMaxContinRetraceDaysInfo.strNode </span>= <span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">最大连续回撤天数率</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">;
        resMaxRetraceInfo.strNode </span>= <span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">期间最大回撤率</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">;
        resMaxRetraceFromBeginInfo.strNode </span>= <span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">从起始时间算最大回撤率</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">;
        resMaxContinRiseInfo.strNode </span>= <span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">最大连续上涨率</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">;
        resMaxContinRiseDaysInfo.strNode </span>= <span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">最大连续上涨天数率</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">;
        resMaxRiseInfo.strNode </span>= <span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">期间最大上涨率</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">;
        resMaxRiseFromBeginInfo.strNode </span>= <span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">从起始时间算最大上涨率</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">;

        resRetraceRiseFromBeginInfo.strNode </span>= <span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">区间回撤/上涨率</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">;
    }

    </span><span style="color: rgba(0, 0, 255, 1)">string</span><span style="color: rgba(0, 0, 0, 1)"> getString()
    {
        </span><span style="color: rgba(0, 0, 255, 1)">string</span><span style="color: rgba(0, 0, 0, 1)"> strRet;
        strRet </span>+=<span style="color: rgba(0, 0, 0, 1)"> resRetraceRiseFromBeginInfo.getString();
        strRet </span>+= <span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">---------------------\n</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">;
        strRet </span>+=<span style="color: rgba(0, 0, 0, 1)"> resMaxContinRetraceInfo.getString();
        strRet </span>+=<span style="color: rgba(0, 0, 0, 1)"> resMaxRetraceInfo.getString();
        strRet </span>+=<span style="color: rgba(0, 0, 0, 1)"> resMaxRetraceFromBeginInfo.getString();
        strRet </span>+=<span style="color: rgba(0, 0, 0, 1)"> resMaxContinRetraceDaysInfo.getString();
        strRet </span>+= <span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">---------------------\n</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">;
        strRet </span>+=<span style="color: rgba(0, 0, 0, 1)"> resMaxContinRiseInfo.getString();
        strRet </span>+=<span style="color: rgba(0, 0, 0, 1)"> resMaxRiseInfo.getString();
        strRet </span>+=<span style="color: rgba(0, 0, 0, 1)"> resMaxRiseFromBeginInfo.getString();
        strRet </span>+=<span style="color: rgba(0, 0, 0, 1)"> resMaxContinRiseDaysInfo.getString();

        </span><span style="color: rgba(0, 0, 255, 1)">return</span><span style="color: rgba(0, 0, 0, 1)"> strRet;
    }

    </span><span style="color: rgba(0, 0, 255, 1)">void</span><span style="color: rgba(0, 0, 0, 1)"> print()
    {
        resRetraceRiseFromBeginInfo.print();
        cout </span>&lt;&lt; <span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">---------------------</span><span style="color: rgba(128, 0, 0, 1)">"</span> &lt;&lt;<span style="color: rgba(0, 0, 0, 1)"> endl;
        resMaxContinRetraceInfo.print();
        resMaxRetraceInfo.print();
        resMaxRetraceFromBeginInfo.print();
        resMaxContinRetraceDaysInfo.print();
        cout </span>&lt;&lt; <span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">---------------------</span><span style="color: rgba(128, 0, 0, 1)">"</span> &lt;&lt;<span style="color: rgba(0, 0, 0, 1)"> endl;
        resMaxContinRiseInfo.print();
        resMaxRiseInfo.print();
        resMaxRiseFromBeginInfo.print();
        resMaxContinRiseDaysInfo.print();
    }
}ResultInfo;

</span><span style="color: rgba(0, 0, 255, 1)">int</span> getRectracement(<span style="color: rgba(0, 0, 255, 1)">const</span> vector&lt;NetValueInfo&gt; &amp;<span style="color: rgba(0, 0, 0, 1)">vecNetValueInfo, size_t nBegPos, size_t nEndPos,
    OUT ResultInfo</span>&amp;<span style="color: rgba(0, 0, 0, 1)"> resultInfo);

</span><span style="color: rgba(0, 0, 255, 1)">void</span> testGetRectracement();</pre>
</div>
<p>&nbsp;</p>
<p>stdafx.h</p>
<div class="cnblogs_code">
<pre><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> stdafx.h : 标准系统包含文件的包含文件，
</span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 或是经常使用但不常更改的
</span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 特定于项目的包含文件
</span><span style="color: rgba(0, 128, 0, 1)">//
</span>
<span style="color: rgba(0, 0, 255, 1)">#pragma</span> once


<span style="color: rgba(0, 0, 255, 1)">#define</span> WIN32_LEAN_AND_MEAN        <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 从 Windows 头中排除极少使用的资料</span><span style="color: rgba(0, 0, 0, 1)">
#include </span>&lt;stdio.h&gt;<span style="color: rgba(0, 0, 0, 1)">
#include </span>&lt;tchar.h&gt;



<span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> TODO: 在此处引用程序需要的其他头文件</span>
#include &lt;stdlib.h&gt;<span style="color: rgba(0, 0, 0, 1)">
#include </span>&lt;<span style="color: rgba(0, 0, 255, 1)">string</span>&gt;<span style="color: rgba(0, 0, 0, 1)">
#include </span>&lt;vector&gt;<span style="color: rgba(0, 0, 0, 1)">
#include </span>&lt;iostream&gt;
<span style="color: rgba(0, 0, 255, 1)">using</span> <span style="color: rgba(0, 0, 255, 1)">namespace</span><span style="color: rgba(0, 0, 0, 1)"> std;
#include </span>&lt;windows.h&gt;<span style="color: rgba(0, 0, 0, 1)">
#include </span>&lt;assert.h&gt;

<span style="color: rgba(0, 0, 255, 1)">#define</span> itoa _itoa


<span style="color: rgba(0, 0, 255, 1)">const</span> <span style="color: rgba(0, 0, 255, 1)">string</span>&amp; stringReplace(<span style="color: rgba(0, 0, 255, 1)">string</span>&amp; str, <span style="color: rgba(0, 0, 255, 1)">const</span> <span style="color: rgba(0, 0, 255, 1)">string</span>&amp; strToReplace, <span style="color: rgba(0, 0, 255, 1)">const</span> <span style="color: rgba(0, 0, 255, 1)">string</span>&amp;<span style="color: rgba(0, 0, 0, 1)"> strReplaceTo);
</span><span style="color: rgba(0, 0, 255, 1)">char</span> *stringReplace(<span style="color: rgba(0, 0, 255, 1)">char</span> *str, <span style="color: rgba(0, 0, 255, 1)">const</span> <span style="color: rgba(0, 0, 255, 1)">char</span> *strToReplace, <span style="color: rgba(0, 0, 255, 1)">const</span> <span style="color: rgba(0, 0, 255, 1)">char</span> *<span style="color: rgba(0, 0, 0, 1)">strReplaceTo);

</span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> UTF8编码转换到GBK编码</span>
<span style="color: rgba(0, 0, 255, 1)">int</span> UTF8ToGBK(<span style="color: rgba(0, 0, 255, 1)">const</span> <span style="color: rgba(0, 0, 255, 1)">char</span> *lpUTF8Str, <span style="color: rgba(0, 0, 255, 1)">char</span> *lpGBKStr,<span style="color: rgba(0, 0, 255, 1)">int</span><span style="color: rgba(0, 0, 0, 1)"> nGBKStrLen);
</span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">GBK编码转换到UTF8编码</span>
<span style="color: rgba(0, 0, 255, 1)">int</span> GBKToUTF8(<span style="color: rgba(0, 0, 255, 1)">const</span> <span style="color: rgba(0, 0, 255, 1)">char</span> *lpGBKStr, <span style="color: rgba(0, 0, 255, 1)">char</span> *lpUTF8Str, <span style="color: rgba(0, 0, 255, 1)">int</span><span style="color: rgba(0, 0, 0, 1)"> nUTF8StrLen);


</span><span style="color: rgba(0, 0, 255, 1)">enum</span> URL_TYPE{unkowurl, eastmoney, howbuy, fund123, jjmmw, qq};</pre>
</div>
<p>getFundNetValue.cpp</p>
<div class="cnblogs_code">
<pre><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> getFundNetValue.cpp : 定义控制台应用程序的入口点。
</span><span style="color: rgba(0, 128, 0, 1)">//
</span><span style="color: rgba(0, 0, 0, 1)">
#include </span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">stdafx.h</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">
#include </span>&lt;algorithm&gt;<span style="color: rgba(0, 0, 0, 1)">
#include </span>&lt;<span style="color: rgba(0, 0, 255, 1)">string</span>&gt;<span style="color: rgba(0, 0, 0, 1)">
#include </span>&lt;map&gt;<span style="color: rgba(0, 0, 0, 1)">
#include </span>&lt;ctime&gt;<span style="color: rgba(0, 0, 0, 1)">
#include </span>&lt;algorithm&gt;<span style="color: rgba(0, 0, 0, 1)">
#include </span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">getRetracement.h</span><span style="color: rgba(128, 0, 0, 1)">"</span>
<span style="color: rgba(0, 0, 255, 1)">using</span> <span style="color: rgba(0, 0, 255, 1)">namespace</span><span style="color: rgba(0, 0, 0, 1)"> std;


URL_TYPE getUrlType(</span><span style="color: rgba(0, 0, 255, 1)">const</span> <span style="color: rgba(0, 0, 255, 1)">string</span>&amp;<span style="color: rgba(0, 0, 0, 1)"> url)
{
    </span><span style="color: rgba(0, 0, 255, 1)">string</span> urlLower =<span style="color: rgba(0, 0, 0, 1)"> url;
    transform(urlLower.begin(), urlLower.end(), urlLower.begin(), ::tolower);
    </span><span style="color: rgba(0, 0, 255, 1)">if</span> (urlLower.find(<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">eastmoney.com</span><span style="color: rgba(128, 0, 0, 1)">"</span>) != <span style="color: rgba(0, 0, 255, 1)">string</span>::npos || url.find(<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">1234567.com</span><span style="color: rgba(128, 0, 0, 1)">"</span>) != <span style="color: rgba(0, 0, 255, 1)">string</span><span style="color: rgba(0, 0, 0, 1)">::npos )
    {
        </span><span style="color: rgba(0, 0, 255, 1)">return</span><span style="color: rgba(0, 0, 0, 1)"> eastmoney;
    }
    </span><span style="color: rgba(0, 0, 255, 1)">else</span> <span style="color: rgba(0, 0, 255, 1)">if</span> (urlLower.find(<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">howbuy.com</span><span style="color: rgba(128, 0, 0, 1)">"</span>) != <span style="color: rgba(0, 0, 255, 1)">string</span><span style="color: rgba(0, 0, 0, 1)">::npos)
    {
        </span><span style="color: rgba(0, 0, 255, 1)">return</span><span style="color: rgba(0, 0, 0, 1)"> howbuy;
    }
    </span><span style="color: rgba(0, 0, 255, 1)">else</span> <span style="color: rgba(0, 0, 255, 1)">if</span> (urlLower.find(<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">fund123.cn</span><span style="color: rgba(128, 0, 0, 1)">"</span>) != <span style="color: rgba(0, 0, 255, 1)">string</span><span style="color: rgba(0, 0, 0, 1)">::npos)
    {
        </span><span style="color: rgba(0, 0, 255, 1)">return</span><span style="color: rgba(0, 0, 0, 1)"> fund123;
    }
    </span><span style="color: rgba(0, 0, 255, 1)">else</span> <span style="color: rgba(0, 0, 255, 1)">if</span> (urlLower.find(<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">jjmmw.com</span><span style="color: rgba(128, 0, 0, 1)">"</span>) != <span style="color: rgba(0, 0, 255, 1)">string</span><span style="color: rgba(0, 0, 0, 1)">::npos)
    {
        </span><span style="color: rgba(0, 0, 255, 1)">return</span><span style="color: rgba(0, 0, 0, 1)"> jjmmw;
    }
    </span><span style="color: rgba(0, 0, 255, 1)">else</span> <span style="color: rgba(0, 0, 255, 1)">if</span> (urlLower.find(<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">qq.com</span><span style="color: rgba(128, 0, 0, 1)">"</span>) != <span style="color: rgba(0, 0, 255, 1)">string</span><span style="color: rgba(0, 0, 0, 1)">::npos)
    {
        </span><span style="color: rgba(0, 0, 255, 1)">return</span><span style="color: rgba(0, 0, 0, 1)"> qq;
    }
    </span><span style="color: rgba(0, 0, 255, 1)">else</span><span style="color: rgba(0, 0, 0, 1)">
    {
        </span><span style="color: rgba(0, 0, 255, 1)">return</span><span style="color: rgba(0, 0, 0, 1)"> unkowurl;
    }
}


size_t splitToVector(</span><span style="color: rgba(0, 0, 255, 1)">const</span> <span style="color: rgba(0, 0, 255, 1)">char</span> *src, <span style="color: rgba(0, 0, 255, 1)">const</span> <span style="color: rgba(0, 0, 255, 1)">char</span> *separator, vector&lt;<span style="color: rgba(0, 0, 255, 1)">string</span>&gt;&amp;<span style="color: rgba(0, 0, 0, 1)"> vecOut)
{
    </span><span style="color: rgba(0, 0, 255, 1)">const</span> <span style="color: rgba(0, 0, 255, 1)">char</span> *pFound, *pBegin =<span style="color: rgba(0, 0, 0, 1)"> src;
    </span><span style="color: rgba(0, 0, 255, 1)">const</span> size_t nSeparatorLen =<span style="color: rgba(0, 0, 0, 1)"> strlen(separator);

    vecOut.clear();

    </span><span style="color: rgba(0, 0, 255, 1)">while</span> ( NULL != (pFound =<span style="color: rgba(0, 0, 0, 1)"> strstr(pBegin, separator)) )
    {
        vecOut.push_back(</span><span style="color: rgba(0, 0, 255, 1)">string</span><span style="color: rgba(0, 0, 0, 1)">(pBegin, pFound));
        pBegin </span>= pFound +<span style="color: rgba(0, 0, 0, 1)"> nSeparatorLen;
    }

    </span><span style="color: rgba(0, 0, 255, 1)">if</span> (*pBegin != <span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">\0</span><span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(0, 0, 0, 1)">)
    {
        vecOut.push_back(pBegin);
    }

    </span><span style="color: rgba(0, 0, 255, 1)">return</span><span style="color: rgba(0, 0, 0, 1)"> vecOut.size();
}

</span><span style="color: rgba(0, 0, 255, 1)">void</span> removeCharHeadTail(<span style="color: rgba(0, 0, 255, 1)">string</span>&amp; str, <span style="color: rgba(0, 0, 255, 1)">const</span> <span style="color: rgba(0, 0, 255, 1)">char</span><span style="color: rgba(0, 0, 0, 1)"> trimChr)
{
    size_t begPos </span>= <span style="color: rgba(128, 0, 128, 1)">0</span><span style="color: rgba(0, 0, 0, 1)">;
    size_t endPos </span>= <span style="color: rgba(0, 0, 255, 1)">string</span><span style="color: rgba(0, 0, 0, 1)">::npos;
    size_t nStrLen </span>=<span style="color: rgba(0, 0, 0, 1)"> str.size();

    </span><span style="color: rgba(0, 0, 255, 1)">if</span> (nStrLen == <span style="color: rgba(128, 0, 128, 1)">0</span><span style="color: rgba(0, 0, 0, 1)">)
    {
        </span><span style="color: rgba(0, 0, 255, 1)">return</span><span style="color: rgba(0, 0, 0, 1)">;
    }

    </span><span style="color: rgba(0, 0, 255, 1)">if</span> (str[<span style="color: rgba(128, 0, 128, 1)">0</span>] ==<span style="color: rgba(0, 0, 0, 1)"> trimChr) 
    {
        begPos </span>= <span style="color: rgba(128, 0, 128, 1)">1</span><span style="color: rgba(0, 0, 0, 1)">;
    }

    </span><span style="color: rgba(0, 0, 255, 1)">if</span> (str[nStrLen - <span style="color: rgba(128, 0, 128, 1)">1</span>] ==<span style="color: rgba(0, 0, 0, 1)"> trimChr)
    {
        endPos </span>= nStrLen - begPos - <span style="color: rgba(128, 0, 128, 1)">1</span><span style="color: rgba(0, 0, 0, 1)">;
    }

    str </span>=<span style="color: rgba(0, 0, 0, 1)"> str.substr(begPos, endPos);
}

</span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">获取估值</span>
size_t getFoundNetValueGz(<span style="color: rgba(0, 0, 255, 1)">const</span> <span style="color: rgba(0, 0, 255, 1)">string</span>&amp; strHtml, vector&lt;<span style="color: rgba(0, 0, 255, 1)">string</span>&gt;&amp; vecResult, URL_TYPE urlType, <span style="color: rgba(0, 128, 0, 1)">/*</span><span style="color: rgba(0, 128, 0, 1)">const </span><span style="color: rgba(0, 128, 0, 1)">*/</span>map&lt;<span style="color: rgba(0, 0, 255, 1)">string</span>, <span style="color: rgba(0, 0, 255, 1)">string</span>&gt;&amp;<span style="color: rgba(0, 0, 0, 1)"> mpConfig)
{
    assert(strHtml.size() </span>!= <span style="color: rgba(128, 0, 128, 1)">0</span><span style="color: rgba(0, 0, 0, 1)">);

    vecResult.clear();

    </span><span style="color: rgba(0, 0, 255, 1)">string</span><span style="color: rgba(0, 0, 0, 1)"> strStart, strEnd;
    </span><span style="color: rgba(0, 0, 255, 1)">if</span> (urlType == eastmoney || urlType ==<span style="color: rgba(0, 0, 0, 1)"> unkowurl)
    {
        strStart </span>= <span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">&lt;input type=\"checkbox\"</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">;
        strEnd </span>= <span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">&lt;/table&gt;</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">;
    }
    </span><span style="color: rgba(0, 0, 255, 1)">else</span> <span style="color: rgba(0, 0, 255, 1)">if</span> (urlType ==<span style="color: rgba(0, 0, 0, 1)"> fund123)
    {
        strStart </span>= <span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">&lt;input type=checkbox</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">;
        strEnd </span>= <span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">&lt;/table&gt;</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">;
    }
    </span><span style="color: rgba(0, 0, 255, 1)">else</span><span style="color: rgba(0, 0, 0, 1)">
    {
        fprintf(stderr, </span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">未知网站\n</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">);
        </span><span style="color: rgba(0, 0, 255, 1)">return</span> <span style="color: rgba(128, 0, 128, 1)">0</span><span style="color: rgba(0, 0, 0, 1)">;
    }


    </span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">每个基金数据从&lt;tr id=</span>
    size_t pos = strHtml.find(strStart, strHtml.find(<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">增长率</span><span style="color: rgba(128, 0, 0, 1)">"</span>) + <span style="color: rgba(128, 0, 128, 1)">1</span><span style="color: rgba(0, 0, 0, 1)">);

    </span><span style="color: rgba(0, 0, 255, 1)">bool</span> endFlag = <span style="color: rgba(0, 0, 255, 1)">false</span><span style="color: rgba(0, 0, 0, 1)">;
    </span><span style="color: rgba(0, 0, 255, 1)">while</span> (pos != <span style="color: rgba(0, 0, 255, 1)">string</span>::npos &amp;&amp; !<span style="color: rgba(0, 0, 0, 1)">endFlag)
    {
        size_t endpos </span>= strHtml.find(strStart, pos + <span style="color: rgba(128, 0, 128, 1)">1</span><span style="color: rgba(0, 0, 0, 1)">);

        </span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">最后一个基金之后没有&lt;tr id=，所以需要另找结束标志</span>
        <span style="color: rgba(0, 0, 255, 1)">if</span> (endpos == <span style="color: rgba(0, 0, 255, 1)">string</span><span style="color: rgba(0, 0, 0, 1)">::npos)
        {
            endFlag </span>= <span style="color: rgba(0, 0, 255, 1)">true</span><span style="color: rgba(0, 0, 0, 1)">;

            endpos </span>= strHtml.find(strEnd, pos + <span style="color: rgba(128, 0, 128, 1)">1</span><span style="color: rgba(0, 0, 0, 1)">);
            </span><span style="color: rgba(0, 0, 255, 1)">if</span> (endpos == <span style="color: rgba(0, 0, 255, 1)">string</span><span style="color: rgba(0, 0, 0, 1)">::npos)
            {
                </span><span style="color: rgba(0, 0, 255, 1)">break</span><span style="color: rgba(0, 0, 0, 1)">;
            }
        }

        </span><span style="color: rgba(0, 0, 255, 1)">char</span> buffer[<span style="color: rgba(128, 0, 128, 1)">4096</span><span style="color: rgba(0, 0, 0, 1)">];
        size_t i </span>= <span style="color: rgba(128, 0, 128, 1)">0</span><span style="color: rgba(0, 0, 0, 1)">; 
        buffer[i</span>++] = <span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">\t</span><span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(0, 0, 0, 1)">;

        </span><span style="color: rgba(0, 0, 255, 1)">bool</span> contentFlag = <span style="color: rgba(0, 0, 255, 1)">false</span><span style="color: rgba(0, 0, 0, 1)">;
        </span><span style="color: rgba(0, 0, 255, 1)">int</span> nCnt = <span style="color: rgba(128, 0, 128, 1)">0</span><span style="color: rgba(0, 0, 0, 1)">;
        </span><span style="color: rgba(0, 0, 255, 1)">for</span> (i = <span style="color: rgba(128, 0, 128, 1)">1</span>; pos &lt; endpos; pos++<span style="color: rgba(0, 0, 0, 1)">)
        {
            </span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">没有内容的节点不增加\t 如“&lt;node&gt;&lt;/node&gt;”</span>
            <span style="color: rgba(0, 0, 255, 1)">if</span> (strHtml[pos] == <span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">&lt;</span><span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(0, 0, 0, 1)">)
            {
                </span><span style="color: rgba(0, 0, 255, 1)">if</span> (contentFlag &amp;&amp; buffer[i - <span style="color: rgba(128, 0, 128, 1)">1</span>] != <span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">\t</span><span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(0, 0, 0, 1)">)
                {
                    buffer[i</span>++] = <span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">\t</span><span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(0, 0, 0, 1)">;
                    nCnt</span>++<span style="color: rgba(0, 0, 0, 1)">;
                }
                </span><span style="color: rgba(0, 0, 255, 1)">else</span> <span style="color: rgba(0, 0, 255, 1)">if</span> (urlType == fund123 &amp;&amp; nCnt == <span style="color: rgba(128, 0, 128, 1)">4</span><span style="color: rgba(0, 0, 0, 1)">)
                {
                    nCnt</span>++<span style="color: rgba(0, 0, 0, 1)">;
                }

                contentFlag </span>= <span style="color: rgba(0, 0, 255, 1)">false</span><span style="color: rgba(0, 0, 0, 1)">;
            }
            </span><span style="color: rgba(0, 0, 255, 1)">else</span> <span style="color: rgba(0, 0, 255, 1)">if</span> (strHtml[pos] == <span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">&gt;</span><span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(0, 0, 0, 1)">)
            {
                contentFlag </span>= <span style="color: rgba(0, 0, 255, 1)">true</span><span style="color: rgba(0, 0, 0, 1)">;
            }
            </span><span style="color: rgba(0, 0, 255, 1)">else</span><span style="color: rgba(0, 0, 0, 1)">
            {
                </span><span style="color: rgba(0, 0, 255, 1)">if</span> (!contentFlag) <span style="color: rgba(0, 0, 255, 1)">continue</span><span style="color: rgba(0, 0, 0, 1)">;

                </span><span style="color: rgba(0, 0, 255, 1)">if</span> (strHtml[pos] == <span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">\r</span><span style="color: rgba(128, 0, 0, 1)">'</span> || strHtml[pos] == <span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">\n</span><span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(0, 0, 0, 1)">)
                {
                    </span><span style="color: rgba(0, 0, 255, 1)">continue</span><span style="color: rgba(0, 0, 0, 1)">;
                }

                </span><span style="color: rgba(0, 0, 255, 1)">if</span> (urlType != fund123 || nCnt != <span style="color: rgba(128, 0, 128, 1)">4</span><span style="color: rgba(0, 0, 0, 1)">)
                {
                    buffer[i</span>++] =<span style="color: rgba(0, 0, 0, 1)"> strHtml[pos];

                    </span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">除了天天基金网一般网站编码为utf8</span>
                    <span style="color: rgba(0, 0, 255, 1)">if</span> (urlType !=<span style="color: rgba(0, 0, 0, 1)"> eastmoney)
                    {
                        </span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">utf8一个汉字占三个字节 若发现目前处理的字符是中文字符首字节则需将后面两个字节也一并处理了</span>
                        <span style="color: rgba(0, 0, 255, 1)">if</span> (strHtml[pos] &amp; (<span style="color: rgba(128, 0, 128, 1)">1</span> &lt;&lt; <span style="color: rgba(128, 0, 128, 1)">7</span><span style="color: rgba(0, 0, 0, 1)">))
                        {
                            buffer[i</span>++] = strHtml[++<span style="color: rgba(0, 0, 0, 1)">pos];
                            buffer[i</span>++] = strHtml[++<span style="color: rgba(0, 0, 0, 1)">pos];
                        }
                    }
                }
            }
        }

        buffer[i] </span>= <span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">\0</span><span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(0, 0, 0, 1)">;
        </span><span style="color: rgba(0, 0, 255, 1)">char</span> gbkBuffer[<span style="color: rgba(128, 0, 128, 1)">4096</span><span style="color: rgba(0, 0, 0, 1)">];
        </span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">将utf8编码转成gbk编码</span>
        <span style="color: rgba(0, 0, 255, 1)">if</span>( (urlType !=<span style="color: rgba(0, 0, 0, 1)"> eastmoney) 
            </span>&amp;&amp; !UTF8ToGBK(buffer, gbkBuffer, <span style="color: rgba(0, 0, 255, 1)">sizeof</span><span style="color: rgba(0, 0, 0, 1)">(gbkBuffer)) )
        {
            fprintf(stderr, </span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">网页编码转换失败，请发邮件通知作者更新软件：hch1986@21cn.com\n</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">);
            vecResult.clear();
            </span><span style="color: rgba(0, 0, 255, 1)">break</span><span style="color: rgba(0, 0, 0, 1)">;
        }

        </span><span style="color: rgba(0, 0, 255, 1)">if</span> (urlType ==<span style="color: rgba(0, 0, 0, 1)"> eastmoney)
        {
            </span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">为了保持与基金净值格式相同，特意去掉这段文字</span>
            vecResult.push_back(stringReplace(buffer, <span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">估算图\t</span><span style="color: rgba(128, 0, 0, 1)">"</span>, <span style="color: rgba(128, 0, 0, 1)">""</span><span style="color: rgba(0, 0, 0, 1)">));
        }
        </span><span style="color: rgba(0, 0, 255, 1)">else</span><span style="color: rgba(0, 0, 0, 1)">
        {
            vecResult.push_back( stringReplace(gbkBuffer, </span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">\t购买\t</span><span style="color: rgba(128, 0, 0, 1)">"</span>, <span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">\t</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">) );
        }
    }


    </span><span style="color: rgba(0, 0, 255, 1)">return</span><span style="color: rgba(0, 0, 0, 1)"> vecResult.size();
}


</span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">获取基金网净值数据</span>
size_t getFoundNetValue(<span style="color: rgba(0, 0, 255, 1)">const</span> <span style="color: rgba(0, 0, 255, 1)">string</span>&amp; strHtml, vector&lt;<span style="color: rgba(0, 0, 255, 1)">string</span>&gt;&amp; vecResult, URL_TYPE urlType, <span style="color: rgba(0, 128, 0, 1)">/*</span><span style="color: rgba(0, 128, 0, 1)">const </span><span style="color: rgba(0, 128, 0, 1)">*/</span>map&lt;<span style="color: rgba(0, 0, 255, 1)">string</span>, <span style="color: rgba(0, 0, 255, 1)">string</span>&gt;&amp;<span style="color: rgba(0, 0, 0, 1)"> mpConfig)
{
    </span><span style="color: rgba(0, 0, 255, 1)">string</span><span style="color: rgba(0, 0, 0, 1)"> strNetValue;
    assert(strHtml.size() </span>!= <span style="color: rgba(128, 0, 128, 1)">0</span><span style="color: rgba(0, 0, 0, 1)">);

    vecResult.clear();

    </span><span style="color: rgba(0, 0, 255, 1)">string</span> strStart = mpConfig[<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">allNetValueBegin</span><span style="color: rgba(128, 0, 0, 1)">"</span>], strEnd = mpConfig[<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">allNetValueEnd</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">];
    </span><span style="color: rgba(0, 0, 255, 1)">const</span> size_t begPos =<span style="color: rgba(0, 0, 0, 1)"> strHtml.find(strStart);
    </span><span style="color: rgba(0, 0, 255, 1)">const</span> size_t endPos =<span style="color: rgba(0, 0, 0, 1)"> strHtml.find(strEnd);
    </span><span style="color: rgba(0, 0, 255, 1)">char</span> bufferResult[<span style="color: rgba(128, 0, 128, 1)">2046</span><span style="color: rgba(0, 0, 0, 1)">];
    </span><span style="color: rgba(0, 0, 255, 1)">char</span> gbkBuffer[<span style="color: rgba(128, 0, 128, 1)">1024</span><span style="color: rgba(0, 0, 0, 1)">]; 

    </span><span style="color: rgba(0, 0, 255, 1)">if</span> ((begPos == <span style="color: rgba(0, 0, 255, 1)">string</span><span style="color: rgba(0, 0, 0, 1)">::npos))
    {
        fprintf(stderr, </span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">find strStart err\n</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">);
        </span><span style="color: rgba(0, 0, 255, 1)">return</span> <span style="color: rgba(128, 0, 128, 1)">0</span><span style="color: rgba(0, 0, 0, 1)">;
    }

    strNetValue </span>= strHtml.substr(begPos +<span style="color: rgba(0, 0, 0, 1)"> strStart.size());

    vector</span>&lt;<span style="color: rgba(0, 0, 255, 1)">string</span>&gt;<span style="color: rgba(0, 0, 0, 1)"> vecFunds;
    vector</span>&lt;<span style="color: rgba(0, 0, 255, 1)">string</span>&gt;<span style="color: rgba(0, 0, 0, 1)"> vecCells;
    </span><span style="color: rgba(0, 0, 255, 1)">if</span> (<span style="color: rgba(128, 0, 128, 1)">0</span> == splitToVector(strNetValue.c_str(), mpConfig[<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">netValueSplit</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">].c_str(), vecFunds))
    {
        fprintf(stderr, </span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">split funds err\n</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">);
        </span><span style="color: rgba(0, 0, 255, 1)">return</span> <span style="color: rgba(128, 0, 128, 1)">0</span><span style="color: rgba(0, 0, 0, 1)">;
    }

    size_t todayNetValuePos </span>= atoi(mpConfig[<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">todayNetValuePos</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">].c_str());
    size_t yesterdayNetValuePos </span>= atoi(mpConfig[<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">yesterdayNetValuePos</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">].c_str());
    size_t increasePos </span>= atoi(mpConfig[<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">increasePos</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">].c_str());
    size_t fundSnPos </span>= atoi(mpConfig[<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">fundSnPos</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">].c_str());
    size_t fundNamePos </span>= atoi(mpConfig[<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">fundNamePos</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">].c_str());
    size_t maxPos </span>=<span style="color: rgba(0, 0, 0, 1)"> max(todayNetValuePos, max(yesterdayNetValuePos, max(increasePos, max(fundSnPos, fundNamePos))));
    </span><span style="color: rgba(0, 0, 255, 1)">bool</span> bUtf8Flag = (mpConfig[<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">utf2gbk</span><span style="color: rgba(128, 0, 0, 1)">"</span>] == <span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">1</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">);
    </span><span style="color: rgba(0, 0, 255, 1)">bool</span> bRemoveHeadTailFlag = (mpConfig[<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">trimChar</span><span style="color: rgba(128, 0, 0, 1)">"</span>].size() != <span style="color: rgba(128, 0, 128, 1)">0</span><span style="color: rgba(0, 0, 0, 1)">);
    </span><span style="color: rgba(0, 0, 255, 1)">const</span> <span style="color: rgba(0, 0, 255, 1)">char</span> *<span style="color: rgba(0, 0, 0, 1)">fundName;

    </span><span style="color: rgba(0, 0, 255, 1)">for</span> (size_t i = <span style="color: rgba(128, 0, 128, 1)">0</span>; i &lt; vecFunds.size(); i++<span style="color: rgba(0, 0, 0, 1)">)
    {
        </span><span style="color: rgba(0, 0, 255, 1)">if</span> (maxPos &gt; splitToVector(vecFunds[i].c_str(), mpConfig[<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">cellSplit</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">].c_str(), vecCells))
        {
            fprintf(stderr, </span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">split cells err %d\n</span><span style="color: rgba(128, 0, 0, 1)">"</span>, (<span style="color: rgba(0, 0, 255, 1)">int</span><span style="color: rgba(0, 0, 0, 1)">)i);
            </span><span style="color: rgba(0, 0, 255, 1)">continue</span><span style="color: rgba(0, 0, 0, 1)">;
        }

        </span><span style="color: rgba(0, 0, 255, 1)">if</span><span style="color: rgba(0, 0, 0, 1)"> (bRemoveHeadTailFlag)
        {
            </span><span style="color: rgba(0, 0, 255, 1)">for</span> (size_t j = <span style="color: rgba(128, 0, 128, 1)">0</span>; j &lt; vecCells.size(); j++<span style="color: rgba(0, 0, 0, 1)">)
            {
                removeCharHeadTail(vecCells[j], mpConfig[</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">trimChar</span><span style="color: rgba(128, 0, 0, 1)">"</span>][<span style="color: rgba(128, 0, 128, 1)">0</span><span style="color: rgba(0, 0, 0, 1)">]);
            }
        }

        </span><span style="color: rgba(0, 0, 255, 1)">if</span> (mpConfig[<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">leftTrimNameChar</span><span style="color: rgba(128, 0, 0, 1)">"</span>].size() != <span style="color: rgba(128, 0, 128, 1)">0</span><span style="color: rgba(0, 0, 0, 1)">)
        {
            </span><span style="color: rgba(0, 0, 255, 1)">string</span>&amp; fundName = vecCells[fundNamePos - <span style="color: rgba(128, 0, 128, 1)">1</span><span style="color: rgba(0, 0, 0, 1)">];
            size_t pos </span>= fundName.find(mpConfig[<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">leftTrimNameChar</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">]);
            </span><span style="color: rgba(0, 0, 255, 1)">if</span> (pos != <span style="color: rgba(0, 0, 255, 1)">string</span><span style="color: rgba(0, 0, 0, 1)">::npos)
            {
                fundName </span>= fundName.substr(pos + mpConfig[<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">leftTrimNameChar</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">].size());
            }
        }

        </span><span style="color: rgba(0, 0, 255, 1)">if</span> (vecCells[increasePos - <span style="color: rgba(128, 0, 128, 1)">1</span>].size() == <span style="color: rgba(128, 0, 128, 1)">0</span><span style="color: rgba(0, 0, 0, 1)">)
        {
            vecCells[increasePos </span>- <span style="color: rgba(128, 0, 128, 1)">1</span>] = <span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">0</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">;
        }

        </span><span style="color: rgba(0, 0, 255, 1)">if</span> (mpConfig[<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">increaseIsPercent</span><span style="color: rgba(128, 0, 0, 1)">"</span>] != <span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">1</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">)
        {
            </span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">char valueBuf[32];
            </span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">sprintf(valueBuf, "%.2f%%", atof(vecCells[increasePos - 1].c_str()) * 100);
            </span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">vecCells[increasePos - 1] = valueBuf;</span>
            vecCells[increasePos - <span style="color: rgba(128, 0, 128, 1)">1</span>] = vecCells[increasePos - <span style="color: rgba(128, 0, 128, 1)">1</span>] + <span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">%</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">;
        }

</span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">         for (size_t j = 0; j &lt; vecCells.size(); j++)
</span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">         {
</span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">             printf("%s ", vecCells[j].c_str());
</span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">         }
</span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">         printf("\n");</span>
        fundName = vecCells[fundNamePos - <span style="color: rgba(128, 0, 128, 1)">1</span><span style="color: rgba(0, 0, 0, 1)">].c_str();
        </span><span style="color: rgba(0, 0, 255, 1)">if</span><span style="color: rgba(0, 0, 0, 1)"> (bUtf8Flag)
        {
            UTF8ToGBK(fundName, gbkBuffer, </span><span style="color: rgba(0, 0, 255, 1)">sizeof</span><span style="color: rgba(0, 0, 0, 1)">(gbkBuffer));
            fundName </span>=<span style="color: rgba(0, 0, 0, 1)"> gbkBuffer;
        }

        sprintf(bufferResult, </span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">\t%d    %s    %s    ---    ---    %s    今日累计净值    %s    昨日累计净值    净值增长值    %s</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">,
            (</span><span style="color: rgba(0, 0, 255, 1)">int</span>) i, vecCells[fundSnPos - <span style="color: rgba(128, 0, 128, 1)">1</span><span style="color: rgba(0, 0, 0, 1)">].c_str(), fundName,
            vecCells[todayNetValuePos </span>- <span style="color: rgba(128, 0, 128, 1)">1</span>].c_str(), vecCells[yesterdayNetValuePos - <span style="color: rgba(128, 0, 128, 1)">1</span>].c_str(), vecCells[increasePos - <span style="color: rgba(128, 0, 128, 1)">1</span><span style="color: rgba(0, 0, 0, 1)">].c_str());
        vecResult.push_back(bufferResult);
    }

    </span><span style="color: rgba(0, 0, 255, 1)">return</span><span style="color: rgba(0, 0, 0, 1)"> vecResult.size();
}




</span><span style="color: rgba(0, 0, 255, 1)">bool</span> setClipboard(<span style="color: rgba(0, 0, 255, 1)">const</span> <span style="color: rgba(0, 0, 255, 1)">string</span>&amp;<span style="color: rgba(0, 0, 0, 1)"> str)
{
    </span><span style="color: rgba(0, 0, 255, 1)">if</span> (!<span style="color: rgba(0, 0, 0, 1)">OpenClipboard(NULL))   
    {
        </span><span style="color: rgba(0, 0, 255, 1)">return</span> <span style="color: rgba(0, 0, 255, 1)">false</span><span style="color: rgba(0, 0, 0, 1)">;
    }

    size_t nCount </span>=<span style="color: rgba(0, 0, 0, 1)"> str.size();  
    HGLOBAL hGlobalMem </span>= GlobalAlloc(GMEM_MOVEABLE, (nCount+<span style="color: rgba(128, 0, 128, 1)">1</span>) * <span style="color: rgba(0, 0, 255, 1)">sizeof</span><span style="color: rgba(0, 0, 0, 1)">(TCHAR));

    </span><span style="color: rgba(0, 0, 255, 1)">if</span> (!<span style="color: rgba(0, 0, 0, 1)">hGlobalMem)  
    {   
        CloseClipboard();   
        </span><span style="color: rgba(0, 0, 255, 1)">return</span> <span style="color: rgba(0, 0, 255, 1)">false</span><span style="color: rgba(0, 0, 0, 1)">;  
    }

    EmptyClipboard();  

    LPTSTR lpszStr</span>=<span style="color: rgba(0, 0, 0, 1)"> (LPTSTR) GlobalLock(hGlobalMem);  
    memcpy(lpszStr, str.c_str(), nCount </span>* <span style="color: rgba(0, 0, 255, 1)">sizeof</span><span style="color: rgba(0, 0, 0, 1)">(TCHAR));  
    lpszStr[nCount] </span>= (TCHAR) <span style="color: rgba(128, 0, 128, 1)">0</span><span style="color: rgba(0, 0, 0, 1)">;  
    GlobalUnlock(hGlobalMem);

#ifdef UNICODE  
    SetClipboardData(CF_UNICODETEXT, hGlobalMem);
</span><span style="color: rgba(0, 0, 255, 1)">#else</span>  <span style="color: rgba(0, 0, 0, 1)">
    SetClipboardData(CF_TEXT, hGlobalMem);
</span><span style="color: rgba(0, 0, 255, 1)">#endif</span>  <span style="color: rgba(0, 0, 0, 1)">

    CloseClipboard();

    </span><span style="color: rgba(0, 0, 255, 1)">return</span> <span style="color: rgba(0, 0, 255, 1)">true</span><span style="color: rgba(0, 0, 0, 1)">;
}

</span><span style="color: rgba(0, 0, 255, 1)">void</span><span style="color: rgba(0, 0, 0, 1)"> testGetRectracement();

</span><span style="color: rgba(0, 0, 255, 1)">int</span> readFileToStr(<span style="color: rgba(0, 0, 255, 1)">const</span> <span style="color: rgba(0, 0, 255, 1)">char</span> *strFilePath, <span style="color: rgba(0, 0, 255, 1)">string</span>&amp;<span style="color: rgba(0, 0, 0, 1)"> strHtml)
{
    </span><span style="color: rgba(0, 0, 255, 1)">char</span> buffer[<span style="color: rgba(128, 0, 128, 1)">4097</span><span style="color: rgba(0, 0, 0, 1)">];
    size_t nRead; 

    FILE </span>*fp = fopen(strFilePath, <span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">r</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">);
    </span><span style="color: rgba(0, 0, 255, 1)">if</span> (fp ==<span style="color: rgba(0, 0, 0, 1)"> NULL)
    {
        perror(</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">无法打开临时文件，请确认文件夹是否只读。</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">);
        </span><span style="color: rgba(0, 0, 255, 1)">return</span> -<span style="color: rgba(128, 0, 128, 1)">1</span><span style="color: rgba(0, 0, 0, 1)">;
    }

    strHtml </span>= <span style="color: rgba(128, 0, 0, 1)">""</span><span style="color: rgba(0, 0, 0, 1)">;
    </span><span style="color: rgba(0, 0, 255, 1)">while</span> ((nRead = fread(buffer, <span style="color: rgba(128, 0, 128, 1)">1</span>, <span style="color: rgba(0, 0, 255, 1)">sizeof</span>(buffer) - <span style="color: rgba(128, 0, 128, 1)">1</span>, fp)) != <span style="color: rgba(128, 0, 128, 1)">0</span><span style="color: rgba(0, 0, 0, 1)">)
    {
        buffer[nRead] </span>= <span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">\0</span><span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(0, 0, 0, 1)">;
        strHtml </span>+=<span style="color: rgba(0, 0, 0, 1)"> buffer;
    }
    fclose(fp); 

    </span><span style="color: rgba(0, 0, 255, 1)">if</span> (strHtml == <span style="color: rgba(128, 0, 0, 1)">""</span><span style="color: rgba(0, 0, 0, 1)">)
    {
        fprintf(stderr, </span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">获取基金净值失败，请检查是否网络连接有问题。\n</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">);
        </span><span style="color: rgba(0, 0, 255, 1)">return</span> -<span style="color: rgba(128, 0, 128, 1)">2</span><span style="color: rgba(0, 0, 0, 1)">;
    }

    </span><span style="color: rgba(0, 0, 255, 1)">return</span> <span style="color: rgba(128, 0, 128, 1)">0</span><span style="color: rgba(0, 0, 0, 1)">;
}

</span><span style="color: rgba(0, 0, 255, 1)">const</span> <span style="color: rgba(0, 0, 255, 1)">string</span> getValue(<span style="color: rgba(0, 0, 255, 1)">const</span> <span style="color: rgba(0, 0, 255, 1)">string</span>&amp;<span style="color: rgba(0, 0, 0, 1)"> strIn)
{
    size_t nPos </span>= strIn.find(<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">:\"</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">);
    </span><span style="color: rgba(0, 0, 255, 1)">if</span> (nPos == <span style="color: rgba(0, 0, 255, 1)">string</span><span style="color: rgba(0, 0, 0, 1)">::npos)
    {
        </span><span style="color: rgba(0, 0, 255, 1)">return</span> <span style="color: rgba(128, 0, 0, 1)">""</span><span style="color: rgba(0, 0, 0, 1)">;
    }

    </span><span style="color: rgba(0, 0, 255, 1)">string</span> res = strIn.substr(nPos + <span style="color: rgba(128, 0, 128, 1)">2</span><span style="color: rgba(0, 0, 0, 1)">);

    </span><span style="color: rgba(0, 0, 255, 1)">if</span> (res.size() &lt;= <span style="color: rgba(128, 0, 128, 1)">1</span> || res[res.size() - <span style="color: rgba(128, 0, 128, 1)">1</span>] != <span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">\"</span><span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(0, 0, 0, 1)">)
    {
        </span><span style="color: rgba(0, 0, 255, 1)">return</span> <span style="color: rgba(128, 0, 0, 1)">""</span><span style="color: rgba(0, 0, 0, 1)">;
    }

    res.resize(res.size() </span>- <span style="color: rgba(128, 0, 128, 1)">1</span><span style="color: rgba(0, 0, 0, 1)">);
    </span><span style="color: rgba(0, 0, 255, 1)">return</span><span style="color: rgba(0, 0, 0, 1)"> res;
}

</span><span style="color: rgba(0, 0, 255, 1)">int</span> parseHtml(<span style="color: rgba(0, 0, 255, 1)">const</span> <span style="color: rgba(0, 0, 255, 1)">string</span> &amp;strHtml, map&lt;<span style="color: rgba(0, 0, 255, 1)">string</span>, <span style="color: rgba(0, 0, 255, 1)">string</span>&gt;&amp; mpConfig, vector&lt;NetValueInfo&gt;&amp;<span style="color: rgba(0, 0, 0, 1)"> vecNetValueInfo)
{
    </span><span style="color: rgba(0, 0, 255, 1)">string</span><span style="color: rgba(0, 0, 0, 1)"> strNetValue;
    assert(strHtml.size() </span>!= <span style="color: rgba(128, 0, 128, 1)">0</span><span style="color: rgba(0, 0, 0, 1)">);

    </span><span style="color: rgba(0, 0, 255, 1)">string</span> strStart = mpConfig[<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">allNetValueBegin</span><span style="color: rgba(128, 0, 0, 1)">"</span>], strEnd = mpConfig[<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">allNetValueEnd</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">];
    </span><span style="color: rgba(0, 0, 255, 1)">const</span> size_t begPos =<span style="color: rgba(0, 0, 0, 1)"> strHtml.find(strStart);
    </span><span style="color: rgba(0, 0, 255, 1)">const</span> size_t endPos =<span style="color: rgba(0, 0, 0, 1)"> strHtml.find(strEnd);

    </span><span style="color: rgba(0, 0, 255, 1)">if</span> ((begPos == <span style="color: rgba(0, 0, 255, 1)">string</span><span style="color: rgba(0, 0, 0, 1)">::npos))
    {
        fprintf(stderr, </span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">find strStart err\n</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">);
        </span><span style="color: rgba(0, 0, 255, 1)">return</span> -<span style="color: rgba(128, 0, 128, 1)">1</span><span style="color: rgba(0, 0, 0, 1)">;
    }

    strNetValue </span>= strHtml.substr(begPos +<span style="color: rgba(0, 0, 0, 1)"> strStart.size());

    </span><span style="color: rgba(0, 0, 255, 1)">if</span> (strNetValue.size() == <span style="color: rgba(128, 0, 128, 1)">0</span><span style="color: rgba(0, 0, 0, 1)">)
    {
        </span><span style="color: rgba(0, 0, 255, 1)">return</span> -<span style="color: rgba(128, 0, 128, 1)">5</span><span style="color: rgba(0, 0, 0, 1)">;
    }

    vector</span>&lt;<span style="color: rgba(0, 0, 255, 1)">string</span>&gt;<span style="color: rgba(0, 0, 0, 1)"> vecFunds;
    vector</span>&lt;<span style="color: rgba(0, 0, 255, 1)">string</span>&gt;<span style="color: rgba(0, 0, 0, 1)"> vecCells;
    </span><span style="color: rgba(0, 0, 255, 1)">if</span> (<span style="color: rgba(128, 0, 128, 1)">0</span> == splitToVector(strNetValue.c_str(), mpConfig[<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">netValueSplit</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">].c_str(), vecFunds))
    {
        fprintf(stderr, </span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">split funds err\n</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">);
        </span><span style="color: rgba(0, 0, 255, 1)">return</span> -<span style="color: rgba(128, 0, 128, 1)">10</span><span style="color: rgba(0, 0, 0, 1)">;
    }

    size_t todayNetValuePos </span>= atoi(mpConfig[<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">todayNetValuePos</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">].c_str());
    size_t yesterdayNetValuePos </span>= atoi(mpConfig[<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">yesterdayNetValuePos</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">].c_str());
    size_t increasePos </span>= atoi(mpConfig[<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">increasePos</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">].c_str());
    size_t fundSnPos </span>= atoi(mpConfig[<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">fundSnPos</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">].c_str());
    size_t fundNamePos </span>= atoi(mpConfig[<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">fundNamePos</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">].c_str());
    size_t maxPos </span>=<span style="color: rgba(0, 0, 0, 1)"> max(todayNetValuePos, max(yesterdayNetValuePos, max(increasePos, max(fundSnPos, fundNamePos))));
    </span><span style="color: rgba(0, 0, 255, 1)">bool</span> bUtf8Flag = (mpConfig[<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">utf2gbk</span><span style="color: rgba(128, 0, 0, 1)">"</span>] == <span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">1</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">);
    </span><span style="color: rgba(0, 0, 255, 1)">bool</span> bRemoveHeadTailFlag = (mpConfig[<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">trimChar</span><span style="color: rgba(128, 0, 0, 1)">"</span>].size() != <span style="color: rgba(128, 0, 128, 1)">0</span><span style="color: rgba(0, 0, 0, 1)">);


    </span><span style="color: rgba(0, 0, 255, 1)">for</span> (size_t i = <span style="color: rgba(128, 0, 128, 1)">0</span>; i &lt; vecFunds.size(); i++<span style="color: rgba(0, 0, 0, 1)">)
    {
        </span><span style="color: rgba(0, 0, 255, 1)">if</span> (maxPos &gt; splitToVector(vecFunds[i].c_str(), mpConfig[<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">cellSplit</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">].c_str(), vecCells))
        {
            fprintf(stderr, </span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">split cells err %d\n</span><span style="color: rgba(128, 0, 0, 1)">"</span>, (<span style="color: rgba(0, 0, 255, 1)">int</span><span style="color: rgba(0, 0, 0, 1)">)i);
            </span><span style="color: rgba(0, 0, 255, 1)">continue</span><span style="color: rgba(0, 0, 0, 1)">;
        }

        NetValueInfo netValue;
        netValue.strNetValueDate </span>=<span style="color: rgba(0, 0, 0, 1)"> getValue(vecCells[todayNetValuePos]);
        </span><span style="color: rgba(0, 0, 255, 1)">string</span> val =<span style="color: rgba(0, 0, 0, 1)"> getValue(vecCells[yesterdayNetValuePos]);
        </span><span style="color: rgba(0, 0, 255, 1)">if</span> (val.size() == <span style="color: rgba(128, 0, 128, 1)">0</span><span style="color: rgba(0, 0, 0, 1)">)
        {
            </span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">如果累计净值为空，则取单日净值 如果还是空，则报错
            </span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">典型例子：中信保诚稳鸿A (006011)</span>
            val = getValue(vecCells[yesterdayNetValuePos - <span style="color: rgba(128, 0, 128, 1)">1</span><span style="color: rgba(0, 0, 0, 1)">]);
            </span><span style="color: rgba(0, 0, 255, 1)">if</span> (val.size() == <span style="color: rgba(128, 0, 128, 1)">0</span><span style="color: rgba(0, 0, 0, 1)">)
            {
                </span><span style="color: rgba(0, 0, 255, 1)">return</span> -<span style="color: rgba(128, 0, 128, 1)">20</span><span style="color: rgba(0, 0, 0, 1)">;
            }
        }

        netValue.dAccumulatedNet </span>=<span style="color: rgba(0, 0, 0, 1)"> atof(val.c_str());
        vecNetValueInfo.push_back(netValue);
    }

    </span><span style="color: rgba(0, 0, 255, 1)">return</span> <span style="color: rgba(128, 0, 128, 1)">0</span><span style="color: rgba(0, 0, 0, 1)">;
}

</span><span style="color: rgba(0, 0, 255, 1)">#define</span> DATE_LEN 8
<span style="color: rgba(0, 0, 255, 1)">#define</span> YEAR_LEN 4
<span style="color: rgba(0, 0, 255, 1)">string</span><span style="color: rgba(0, 0, 0, 1)">  getCurrentTimeStr()
{
    time_t t </span>=<span style="color: rgba(0, 0, 0, 1)"> time(NULL);
    </span><span style="color: rgba(0, 0, 255, 1)">char</span> ch[<span style="color: rgba(128, 0, 128, 1)">64</span>] = {<span style="color: rgba(128, 0, 128, 1)">0</span><span style="color: rgba(0, 0, 0, 1)">};
    strftime(ch, </span><span style="color: rgba(0, 0, 255, 1)">sizeof</span>(ch) - <span style="color: rgba(128, 0, 128, 1)">1</span>, <span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">%Y%m%d%H%M%S</span><span style="color: rgba(128, 0, 0, 1)">"</span>, localtime(&amp;<span style="color: rgba(0, 0, 0, 1)">t));
    </span><span style="color: rgba(0, 0, 255, 1)">return</span><span style="color: rgba(0, 0, 0, 1)"> ch;
}

typedef </span><span style="color: rgba(0, 0, 255, 1)">struct</span><span style="color: rgba(0, 0, 0, 1)"> tagNetValueInfoStartEnd
{
    tagNetValueInfoStartEnd(</span><span style="color: rgba(0, 0, 255, 1)">const</span> <span style="color: rgba(0, 0, 255, 1)">string</span>&amp;<span style="color: rgba(0, 0, 0, 1)"> y, size_t b, size_t e)
    {
        year </span>=<span style="color: rgba(0, 0, 0, 1)"> y;
        beg </span>=<span style="color: rgba(0, 0, 0, 1)"> b;
        end </span>=<span style="color: rgba(0, 0, 0, 1)"> e;
    }
    </span><span style="color: rgba(0, 0, 255, 1)">string</span><span style="color: rgba(0, 0, 0, 1)"> year;
    size_t beg;
    size_t end;
}NetValueInfoStartEnd;

</span><span style="color: rgba(0, 0, 255, 1)">int</span> _tmain(<span style="color: rgba(0, 0, 255, 1)">int</span> argc, _TCHAR*<span style="color: rgba(0, 0, 0, 1)"> argv[])
{

    </span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">testGetRectracement();</span>
<span style="color: rgba(0, 0, 0, 1)">
    vector</span>&lt;<span style="color: rgba(0, 0, 255, 1)">string</span>&gt;<span style="color: rgba(0, 0, 0, 1)"> vecResult;
    </span><span style="color: rgba(0, 0, 255, 1)">string</span><span style="color: rgba(0, 0, 0, 1)"> strFundCode;
    </span><span style="color: rgba(0, 0, 255, 1)">string</span><span style="color: rgba(0, 0, 0, 1)"> strCmdFormat;
    </span><span style="color: rgba(0, 0, 255, 1)">char</span> cmd[<span style="color: rgba(128, 0, 128, 1)">1024</span><span style="color: rgba(0, 0, 0, 1)">];
    strCmdFormat </span>= <span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">curl \"http://api.fund.eastmoney.com/f10/lsjz?callback=jQuery183018519977574130597_1558194911277&amp;fundCode=%s&amp;pageIndex=1&amp;pageSize=300&amp;startDate=%s&amp;endDate=%s&amp;_=1558194929451\"  --referer \"http://fundf10.eastmoney.com/\"  --user-agent \"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/69.0.3497.100 Safari/537.36\" -o fund.html</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">;

    </span><span style="color: rgba(0, 0, 255, 1)">if</span> (argc &gt; <span style="color: rgba(128, 0, 128, 1)">1</span><span style="color: rgba(0, 0, 0, 1)">)
    {
        strFundCode </span>= argv[<span style="color: rgba(128, 0, 128, 1)">1</span><span style="color: rgba(0, 0, 0, 1)">];
    }
    </span><span style="color: rgba(0, 0, 255, 1)">else</span><span style="color: rgba(0, 0, 0, 1)">
    {
        cerr </span>&lt;&lt; <span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">请输入6位基金代码并按回车</span><span style="color: rgba(128, 0, 0, 1)">"</span> &lt;&lt;<span style="color: rgba(0, 0, 0, 1)"> endl;
        cin </span>&gt;&gt;<span style="color: rgba(0, 0, 0, 1)"> strFundCode;
    }

    </span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">读取配置</span>
    map&lt;<span style="color: rgba(0, 0, 255, 1)">string</span>, <span style="color: rgba(0, 0, 255, 1)">string</span>&gt;<span style="color: rgba(0, 0, 0, 1)"> mpConfig;
    </span><span style="color: rgba(0, 0, 255, 1)">char</span> nbuffer[<span style="color: rgba(128, 0, 128, 1)">1024</span><span style="color: rgba(0, 0, 0, 1)">];
    </span><span style="color: rgba(0, 0, 255, 1)">char</span> *keyWord[] = {<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">url</span><span style="color: rgba(128, 0, 0, 1)">"</span>, <span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">utf2gbk</span><span style="color: rgba(128, 0, 0, 1)">"</span>, <span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">allNetValueBegin</span><span style="color: rgba(128, 0, 0, 1)">"</span>, <span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">allNetValueEnd</span><span style="color: rgba(128, 0, 0, 1)">"</span>, <span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">netValueSplit</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">,
        </span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">cellSplit</span><span style="color: rgba(128, 0, 0, 1)">"</span>, <span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">todayNetValuePos</span><span style="color: rgba(128, 0, 0, 1)">"</span>, <span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">yesterdayNetValuePos</span><span style="color: rgba(128, 0, 0, 1)">"</span>, <span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">increasePos</span><span style="color: rgba(128, 0, 0, 1)">"</span>, <span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">increaseIsPercent</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">, 
        </span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">fundSnPos</span><span style="color: rgba(128, 0, 0, 1)">"</span>, <span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">fundNamePos</span><span style="color: rgba(128, 0, 0, 1)">"</span>, <span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">trimChar</span><span style="color: rgba(128, 0, 0, 1)">"</span>, <span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">leftTrimNameChar</span><span style="color: rgba(128, 0, 0, 1)">"</span>, <span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">sleepSecond</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">};
    </span><span style="color: rgba(0, 0, 255, 1)">string</span> strUrlName = <span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">eastmoney</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">;

    </span><span style="color: rgba(0, 0, 255, 1)">for</span> (size_t i = <span style="color: rgba(128, 0, 128, 1)">0</span>; i &lt; <span style="color: rgba(0, 0, 255, 1)">sizeof</span>(keyWord) / <span style="color: rgba(0, 0, 255, 1)">sizeof</span>(keyWord[<span style="color: rgba(128, 0, 128, 1)">0</span>]); i++<span style="color: rgba(0, 0, 0, 1)">)
    {
        memset(nbuffer, </span><span style="color: rgba(128, 0, 128, 1)">0</span>, <span style="color: rgba(0, 0, 255, 1)">sizeof</span><span style="color: rgba(0, 0, 0, 1)">(nbuffer));
        GetPrivateProfileString(strUrlName.c_str(), 
            keyWord[i], 
            </span><span style="color: rgba(128, 0, 0, 1)">""</span><span style="color: rgba(0, 0, 0, 1)">, 
            nbuffer, 
            </span><span style="color: rgba(0, 0, 255, 1)">sizeof</span><span style="color: rgba(0, 0, 0, 1)">(nbuffer), 
            </span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">./found.ini</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">);
        fprintf(stderr, </span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">[%s] = [%s]\n</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">, keyWord[i], nbuffer);
        mpConfig[keyWord[i]] </span>=<span style="color: rgba(0, 0, 0, 1)"> nbuffer;
    }


    </span><span style="color: rgba(0, 0, 255, 1)">string</span> strHtml = <span style="color: rgba(128, 0, 0, 1)">""</span><span style="color: rgba(0, 0, 0, 1)">;
    </span><span style="color: rgba(0, 0, 255, 1)">bool</span> bSuccFlag = <span style="color: rgba(0, 0, 255, 1)">false</span><span style="color: rgba(0, 0, 0, 1)">;

    </span><span style="color: rgba(0, 0, 255, 1)">int</span> nYear = atoi(getCurrentTimeStr().substr(<span style="color: rgba(128, 0, 128, 1)">0</span><span style="color: rgba(0, 0, 0, 1)">, YEAR_LEN).c_str());
    vector</span>&lt;NetValueInfo&gt;<span style="color: rgba(0, 0, 0, 1)"> vecNetValueInfo;
    vector</span>&lt;NetValueInfoStartEnd&gt;<span style="color: rgba(0, 0, 0, 1)"> vecPosInfo;

    </span><span style="color: rgba(0, 0, 255, 1)">for</span> (<span style="color: rgba(0, 0, 255, 1)">int</span> i = <span style="color: rgba(128, 0, 128, 1)">0</span>; i &lt; <span style="color: rgba(128, 0, 128, 1)">1000</span>; ++<span style="color: rgba(0, 0, 0, 1)">i)
    {
        </span><span style="color: rgba(0, 0, 255, 1)">char</span> tmpbuf[<span style="color: rgba(128, 0, 128, 1)">64</span><span style="color: rgba(0, 0, 0, 1)">];
        itoa(nYear </span>- i, tmpbuf, <span style="color: rgba(128, 0, 128, 1)">10</span><span style="color: rgba(0, 0, 0, 1)">);

        </span><span style="color: rgba(0, 0, 255, 1)">string</span> strYear =<span style="color: rgba(0, 0, 0, 1)"> tmpbuf;
        </span><span style="color: rgba(0, 0, 255, 1)">string</span> strStartDate = strYear + <span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">-01-01</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">;
        </span><span style="color: rgba(0, 0, 255, 1)">string</span> strEndDate = strYear + <span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">-12-31</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">;


        cout </span>&lt;&lt; <span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">获取</span><span style="color: rgba(128, 0, 0, 1)">"</span> &lt;&lt; strYear &lt;&lt; <span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">年净值。基金代码：</span><span style="color: rgba(128, 0, 0, 1)">"</span> &lt;&lt; strFundCode &lt;&lt;<span style="color: rgba(0, 0, 0, 1)"> endl;

        sprintf(cmd, strCmdFormat.c_str(), 
            strFundCode.c_str(), strStartDate.c_str(), strEndDate.c_str());
        </span><span style="color: rgba(0, 0, 255, 1)">if</span> ( system(cmd) != <span style="color: rgba(128, 0, 128, 1)">0</span><span style="color: rgba(0, 0, 0, 1)"> )
        {
            perror(</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">curl调用失败</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">);
            </span><span style="color: rgba(0, 0, 255, 1)">return</span> -<span style="color: rgba(128, 0, 128, 1)">3</span><span style="color: rgba(0, 0, 0, 1)">;
        }

        readFileToStr(</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">fund.html</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">, strHtml);
        size_t begPos </span>=<span style="color: rgba(0, 0, 0, 1)"> vecNetValueInfo.size();
        </span><span style="color: rgba(0, 0, 255, 1)">if</span><span style="color: rgba(0, 0, 0, 1)"> (parseHtml(strHtml, mpConfig, vecNetValueInfo))
        {
            </span><span style="color: rgba(0, 0, 255, 1)">break</span><span style="color: rgba(0, 0, 0, 1)">;
        }

        bSuccFlag </span>= <span style="color: rgba(0, 0, 255, 1)">true</span><span style="color: rgba(0, 0, 0, 1)">;
        size_t endPos </span>=<span style="color: rgba(0, 0, 0, 1)"> vecNetValueInfo.size();
        vecPosInfo.push_back(NetValueInfoStartEnd(strYear, begPos, endPos));

        </span><span style="color: rgba(0, 128, 0, 1)">/*</span><span style="color: rgba(0, 128, 0, 1)">
        vector&lt;NetValueInfo&gt; vecNetValueInfoNew = vecNetValueInfo;
        ResultInfo resultInfo;
        size_t nBegPos = 0, nEndPos = vecNetValueInfoNew.size();

        reverse(vecNetValueInfoNew.begin(),vecNetValueInfoNew.end());
        getRectracement(vecNetValueInfoNew, nBegPos, nEndPos, resultInfo);

        cout &lt;&lt; "分析起止日期:[" &lt;&lt; vecNetValueInfoNew[nBegPos].strNetValueDate &lt;&lt; "," &lt;&lt; vecNetValueInfoNew[nEndPos - 1].strNetValueDate &lt;&lt; "]" &lt;&lt; endl;
        resultInfo.print();
        </span><span style="color: rgba(0, 128, 0, 1)">*/</span><span style="color: rgba(0, 0, 0, 1)">
        cout </span>&lt;&lt; <span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">休息一会再获取下一年净值</span><span style="color: rgba(128, 0, 0, 1)">"</span> &lt;&lt;<span style="color: rgba(0, 0, 0, 1)"> endl;
        Sleep(atoi(mpConfig[</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">sleepSecond</span><span style="color: rgba(128, 0, 0, 1)">"</span>].c_str()) * <span style="color: rgba(128, 0, 128, 1)">1000</span><span style="color: rgba(0, 0, 0, 1)">);
    }

    </span><span style="color: rgba(0, 0, 255, 1)">if</span> (!<span style="color: rgba(0, 0, 0, 1)">bSuccFlag)
    {
        cerr </span>&lt;&lt; <span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">获取基金净值失败</span><span style="color: rgba(128, 0, 0, 1)">"</span> &lt;&lt;<span style="color: rgba(0, 0, 0, 1)"> endl;
        </span><span style="color: rgba(0, 0, 255, 1)">return</span> -<span style="color: rgba(128, 0, 128, 1)">30</span><span style="color: rgba(0, 0, 0, 1)">;
    }

    </span><span style="color: rgba(0, 0, 255, 1)">if</span> (vecPosInfo.size() &gt; <span style="color: rgba(128, 0, 128, 1)">1</span><span style="color: rgba(0, 0, 0, 1)">)
    {
        vecPosInfo.push_back(NetValueInfoStartEnd(</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">all</span><span style="color: rgba(128, 0, 0, 1)">"</span>, <span style="color: rgba(128, 0, 128, 1)">0</span><span style="color: rgba(0, 0, 0, 1)">, vecNetValueInfo.size()));
    }
        
    bSuccFlag </span>= <span style="color: rgba(0, 0, 255, 1)">false</span><span style="color: rgba(0, 0, 0, 1)">;


    FILE </span>*fp = fopen((strFundCode + <span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">.txt</span><span style="color: rgba(128, 0, 0, 1)">"</span>).c_str(), <span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">w</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">);
    </span><span style="color: rgba(0, 0, 255, 1)">if</span> (fp !=<span style="color: rgba(0, 0, 0, 1)"> NULL)
    {
        </span><span style="color: rgba(0, 0, 255, 1)">for</span> (size_t i = <span style="color: rgba(128, 0, 128, 1)">0</span>; i &lt; vecNetValueInfo.size(); i++<span style="color: rgba(0, 0, 0, 1)">)
        {
            fprintf(fp, </span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">%s %f\n</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">, vecNetValueInfo[i].strNetValueDate.c_str(), vecNetValueInfo[i].dAccumulatedNet);
        }

        fclose(fp);
    }

    strHtml </span>= <span style="color: rgba(128, 0, 0, 1)">""</span><span style="color: rgba(0, 0, 0, 1)">;
    </span><span style="color: rgba(0, 0, 255, 1)">for</span> (size_t i = <span style="color: rgba(128, 0, 128, 1)">0</span>; i &lt; vecPosInfo.size(); i++<span style="color: rgba(0, 0, 0, 1)">)
    {
        vector</span>&lt;NetValueInfo&gt;<span style="color: rgba(0, 0, 0, 1)"> vecNetValueInfoNew;
        ResultInfo resultInfo;
        size_t nBegPos </span>= <span style="color: rgba(128, 0, 128, 1)">0</span><span style="color: rgba(0, 0, 0, 1)">, nEndPos;
        
        vecNetValueInfoNew.assign(vecNetValueInfo.begin() </span>+<span style="color: rgba(0, 0, 0, 1)"> vecPosInfo[i].beg,
            vecNetValueInfo.begin() </span>+<span style="color: rgba(0, 0, 0, 1)"> vecPosInfo[i].end);
        reverse(vecNetValueInfoNew.begin(),vecNetValueInfoNew.end());
        nEndPos </span>=<span style="color: rgba(0, 0, 0, 1)"> vecNetValueInfoNew.size();

        getRectracement(vecNetValueInfoNew, nBegPos, nEndPos, resultInfo);

        _snprintf(nbuffer, </span><span style="color: rgba(0, 0, 255, 1)">sizeof</span>(nbuffer), <span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">分析起止日期:[%s,%s]\n</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">, 
            vecNetValueInfoNew[nBegPos].strNetValueDate.c_str(), vecNetValueInfoNew[nEndPos </span>- <span style="color: rgba(128, 0, 128, 1)">1</span><span style="color: rgba(0, 0, 0, 1)">].strNetValueDate.c_str());

        cout </span>&lt;&lt;<span style="color: rgba(0, 0, 0, 1)"> nbuffer;
        resultInfo.print();
        strHtml </span>+=<span style="color: rgba(0, 0, 0, 1)"> nbuffer;
        strHtml </span>+=<span style="color: rgba(0, 0, 0, 1)"> resultInfo.getString();
    }

    fp </span>= fopen((strFundCode + <span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">_trace.txt</span><span style="color: rgba(128, 0, 0, 1)">"</span>).c_str(), <span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">w</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">);
    </span><span style="color: rgba(0, 0, 255, 1)">if</span> (fp !=<span style="color: rgba(0, 0, 0, 1)"> NULL)
    {

        fprintf(fp, </span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">%s\n</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">, strHtml.c_str());

        fclose(fp);
    }

    </span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">第二个参数为1时才写入剪贴板
    </span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">if (argc &gt; 2 &amp;&amp; argv[2][0] == '1')</span>
<span style="color: rgba(0, 0, 0, 1)">    {
        </span><span style="color: rgba(0, 0, 255, 1)">if</span> (!<span style="color: rgba(0, 0, 0, 1)">setClipboard(strHtml))
        {
            perror(</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">写入剪贴板失败，请手动复制</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">);
            system(</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">run fund.txt</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">);
            </span><span style="color: rgba(0, 0, 255, 1)">return</span> -<span style="color: rgba(128, 0, 128, 1)">5</span><span style="color: rgba(0, 0, 0, 1)">;
        }

        cout </span>&lt;&lt; <span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">结果已复制到剪贴板，基金详细净值见程序目录“基金代码.txt”</span><span style="color: rgba(128, 0, 0, 1)">"</span> &lt;&lt;<span style="color: rgba(0, 0, 0, 1)"> endl;
    }

    </span><span style="color: rgba(0, 0, 255, 1)">return</span> <span style="color: rgba(128, 0, 128, 1)">0</span><span style="color: rgba(0, 0, 0, 1)">;
}</span></pre>
</div>
<p>&nbsp;</p>
<p>&nbsp;getRetracement.cpp</p>
<div class="cnblogs_code">
<pre>#include <span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">stdafx.h</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">
#include </span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">getRetracement.h</span><span style="color: rgba(128, 0, 0, 1)">"</span>


<span style="color: rgba(0, 0, 255, 1)">int</span> getRectracement(<span style="color: rgba(0, 0, 255, 1)">const</span> vector&lt;NetValueInfo&gt; &amp;<span style="color: rgba(0, 0, 0, 1)">vecNetValueInfo, size_t nBegPos, size_t nEndPos,
    OUT ResultInfo</span>&amp;<span style="color: rgba(0, 0, 0, 1)"> resultInfo)
{
    </span><span style="color: rgba(0, 0, 255, 1)">string</span><span style="color: rgba(0, 0, 0, 1)"> strTmp;

    </span><span style="color: rgba(0, 0, 255, 1)">double</span> dLastNetValue = vecNetValueInfo[nBegPos].dAccumulatedNet; <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">记录上一交易日基金净值</span>
    <span style="color: rgba(0, 0, 255, 1)">double</span> dMinNetValue = dLastNetValue, dMaxNetValue = dLastNetValue; <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">记录已出现最大和最小净值</span>
    size_t nMinPos = <span style="color: rgba(128, 0, 128, 1)">0</span>, nMaxPos = <span style="color: rgba(128, 0, 128, 1)">0</span>; <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">记录已出现最大和最小净值出现位置</span>
<span style="color: rgba(0, 0, 0, 1)">
    size_t nCurrRetraceDays </span>= <span style="color: rgba(128, 0, 128, 1)">0</span>; <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">记录当前连续回撤天数</span>
    <span style="color: rgba(0, 0, 255, 1)">bool</span> bIsRetraceLast = <span style="color: rgba(0, 0, 255, 1)">false</span>; <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">上一交易日是否回撤</span>
    size_t nMaxContinuousRetraceDays = <span style="color: rgba(128, 0, 128, 1)">0</span>; <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">最大连续回撤天数</span>
    <span style="color: rgba(0, 0, 255, 1)">double</span> dMaxContinuousRetrace = <span style="color: rgba(128, 0, 128, 1)">0</span>; <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">最大连续回撤率</span>
    <span style="color: rgba(0, 0, 255, 1)">double</span> dMaxRetrace = <span style="color: rgba(128, 0, 128, 1)">0</span>; <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">最大回撤率</span>
    size_t nBegPosRetrace = <span style="color: rgba(128, 0, 128, 1)">0</span>; <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">记录开始回撤的位置</span>
    <span style="color: rgba(0, 0, 255, 1)">double</span> dMaxRetraceFromBeg = <span style="color: rgba(128, 0, 128, 1)">0</span>; <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">从起始位置起算最大回撤率</span>
<span style="color: rgba(0, 0, 0, 1)">
    size_t nCurrRiseDays </span>= <span style="color: rgba(128, 0, 128, 1)">0</span>; <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">记录当前连续回撤天数</span>
    <span style="color: rgba(0, 0, 255, 1)">bool</span> bIsRiseLast = <span style="color: rgba(0, 0, 255, 1)">false</span>; <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">上一交易日是否回撤</span>
    size_t nMaxContinuousRiseDays = <span style="color: rgba(128, 0, 128, 1)">0</span>; <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">最大连续回撤天数</span>
    <span style="color: rgba(0, 0, 255, 1)">double</span> dMaxContinuousRise = <span style="color: rgba(128, 0, 128, 1)">0</span>; <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">最大连续回撤率</span>
    <span style="color: rgba(0, 0, 255, 1)">double</span> dMaxRise = <span style="color: rgba(128, 0, 128, 1)">0</span>; <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">最大回撤率</span>
    size_t nBegPosRise = <span style="color: rgba(128, 0, 128, 1)">0</span>; <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">记录开始回撤的位置</span>
    <span style="color: rgba(0, 0, 255, 1)">double</span> dMaxRiseFromBeg = <span style="color: rgba(128, 0, 128, 1)">0</span>; <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">从起始位置起算最大回撤率</span>

    <span style="color: rgba(0, 0, 255, 1)">double</span> dFirstValue = dLastNetValue; <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">第一天累计净值</span>
<span style="color: rgba(0, 0, 0, 1)">
    size_t nRiseTimes </span>= <span style="color: rgba(128, 0, 128, 1)">0</span><span style="color: rgba(0, 0, 0, 1)">;
    size_t nMaxRiseTimes </span>= <span style="color: rgba(128, 0, 128, 1)">0</span><span style="color: rgba(0, 0, 0, 1)">;

    </span><span style="color: rgba(0, 0, 255, 1)">char</span> tmpBuf[<span style="color: rgba(128, 0, 128, 1)">256</span><span style="color: rgba(0, 0, 0, 1)">];
    </span><span style="color: rgba(0, 0, 255, 1)">double</span><span style="color: rgba(0, 0, 0, 1)"> dTmp;

    </span><span style="color: rgba(0, 0, 255, 1)">const</span> size_t nLastPos = nEndPos - <span style="color: rgba(128, 0, 128, 1)">1</span><span style="color: rgba(0, 0, 0, 1)">;
    resultInfo.resRetraceRiseFromBeginInfo.strBegDate </span>=<span style="color: rgba(0, 0, 0, 1)"> vecNetValueInfo[nBegPos].strNetValueDate;
    resultInfo.resRetraceRiseFromBeginInfo.dBegNetValue </span>=<span style="color: rgba(0, 0, 0, 1)"> vecNetValueInfo[nBegPos].dAccumulatedNet;
    sprintf(tmpBuf, </span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">%.2f%%</span><span style="color: rgba(128, 0, 0, 1)">"</span>, (vecNetValueInfo[nLastPos].dAccumulatedNet - vecNetValueInfo[nBegPos].dAccumulatedNet) / vecNetValueInfo[nBegPos].dAccumulatedNet * <span style="color: rgba(128, 0, 128, 1)">100</span><span style="color: rgba(0, 0, 0, 1)">);
    resultInfo.resRetraceRiseFromBeginInfo.strValue </span>=<span style="color: rgba(0, 0, 0, 1)"> tmpBuf;
    resultInfo.resRetraceRiseFromBeginInfo.strEndDate </span>=<span style="color: rgba(0, 0, 0, 1)"> vecNetValueInfo[nLastPos].strNetValueDate;
    resultInfo.resRetraceRiseFromBeginInfo.dEndNetValue </span>=<span style="color: rgba(0, 0, 0, 1)"> vecNetValueInfo[nLastPos].dAccumulatedNet;



    resultInfo.resMaxRetraceFromBeginInfo.strEndDate </span>= resultInfo.resMaxRetraceFromBeginInfo.strBegDate =<span style="color: rgba(0, 0, 0, 1)"> vecNetValueInfo[nBegPos].strNetValueDate;
    resultInfo.resMaxRetraceFromBeginInfo.dEndNetValue </span>= resultInfo.resMaxRetraceFromBeginInfo.dBegNetValue =<span style="color: rgba(0, 0, 0, 1)"> vecNetValueInfo[nBegPos].dAccumulatedNet;
    resultInfo.resMaxRetraceFromBeginInfo.strValue </span>= <span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">0.00%</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">;

    resultInfo.resMaxRiseFromBeginInfo.strBegDate </span>=<span style="color: rgba(0, 0, 0, 1)"> vecNetValueInfo[nBegPos].strNetValueDate;
    resultInfo.resMaxRiseFromBeginInfo.dBegNetValue </span>=<span style="color: rgba(0, 0, 0, 1)"> vecNetValueInfo[nBegPos].dAccumulatedNet;

    </span><span style="color: rgba(0, 0, 255, 1)">for</span> (size_t i = nBegPos + <span style="color: rgba(128, 0, 128, 1)">1</span>; i &lt; nEndPos; ++<span style="color: rgba(0, 0, 0, 1)">i)
    {
        </span><span style="color: rgba(0, 0, 255, 1)">double</span> dCurrNetValue =<span style="color: rgba(0, 0, 0, 1)"> vecNetValueInfo[i].dAccumulatedNet;
        </span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">从起始时间算最大回撤率</span>
        <span style="color: rgba(0, 0, 255, 1)">if</span> (dCurrNetValue &lt;<span style="color: rgba(0, 0, 0, 1)"> dFirstValue)
        {
            </span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">看从起始时间起算最大回撤率是否需要更新</span>
            dTmp = (dFirstValue - dCurrNetValue)/<span style="color: rgba(0, 0, 0, 1)">dFirstValue;
            </span><span style="color: rgba(0, 0, 255, 1)">if</span> (dMaxRetraceFromBeg &lt;<span style="color: rgba(0, 0, 0, 1)"> dTmp)
            {
                dMaxRetraceFromBeg </span>=<span style="color: rgba(0, 0, 0, 1)"> dTmp;

                sprintf(tmpBuf, </span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">-%.2f%%</span><span style="color: rgba(128, 0, 0, 1)">"</span>, dMaxRetraceFromBeg * <span style="color: rgba(128, 0, 128, 1)">100</span><span style="color: rgba(0, 0, 0, 1)">);
                resultInfo.resMaxRetraceFromBeginInfo.strValue </span>=<span style="color: rgba(0, 0, 0, 1)"> tmpBuf;
                resultInfo.resMaxRetraceFromBeginInfo.strEndDate </span>=<span style="color: rgba(0, 0, 0, 1)"> vecNetValueInfo[i].strNetValueDate;
                resultInfo.resMaxRetraceFromBeginInfo.dEndNetValue </span>=<span style="color: rgba(0, 0, 0, 1)"> vecNetValueInfo[i].dAccumulatedNet;
            }
        }
        </span><span style="color: rgba(0, 0, 255, 1)">else</span> <span style="color: rgba(0, 0, 255, 1)">if</span> (dCurrNetValue &gt;<span style="color: rgba(0, 0, 0, 1)"> dFirstValue)
        {
            </span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">看从起始时间起算最大上涨率是否需要更新</span>
            dTmp = (dCurrNetValue - dFirstValue)/<span style="color: rgba(0, 0, 0, 1)">dFirstValue;
            </span><span style="color: rgba(0, 0, 255, 1)">if</span> (dMaxRiseFromBeg &lt;<span style="color: rgba(0, 0, 0, 1)"> dTmp)
            {
                dMaxRiseFromBeg </span>=<span style="color: rgba(0, 0, 0, 1)"> dTmp;

                sprintf(tmpBuf, </span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">%.2f%%</span><span style="color: rgba(128, 0, 0, 1)">"</span>, dMaxRiseFromBeg * <span style="color: rgba(128, 0, 128, 1)">100</span><span style="color: rgba(0, 0, 0, 1)">);
                resultInfo.resMaxRiseFromBeginInfo.strValue </span>=<span style="color: rgba(0, 0, 0, 1)"> tmpBuf;
                resultInfo.resMaxRiseFromBeginInfo.strEndDate </span>=<span style="color: rgba(0, 0, 0, 1)"> vecNetValueInfo[i].strNetValueDate;
                resultInfo.resMaxRiseFromBeginInfo.dEndNetValue </span>=<span style="color: rgba(0, 0, 0, 1)"> vecNetValueInfo[i].dAccumulatedNet;
            }
        }

        </span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">最大回撤率和上涨率</span>
<span style="color: rgba(0, 0, 0, 1)">        {
            </span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">出现最大值</span>
            <span style="color: rgba(0, 0, 255, 1)">if</span> (dCurrNetValue &gt;<span style="color: rgba(0, 0, 0, 1)"> dMaxNetValue)
            {
                </span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">登记最大值</span>
                dMaxNetValue =<span style="color: rgba(0, 0, 0, 1)"> dCurrNetValue;
                nMaxPos </span>=<span style="color: rgba(0, 0, 0, 1)"> i;

            }

            </span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">出现最小值</span>
            <span style="color: rgba(0, 0, 255, 1)">if</span> (dCurrNetValue &lt;<span style="color: rgba(0, 0, 0, 1)"> dMinNetValue)
            {
                </span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">登记最小值</span>
                dMinNetValue =<span style="color: rgba(0, 0, 0, 1)"> dCurrNetValue;
                nMinPos </span>=<span style="color: rgba(0, 0, 0, 1)"> i;
            }

            </span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">看最大回撤率是否需要更新</span>
            dTmp = (dMaxNetValue - dCurrNetValue)/<span style="color: rgba(0, 0, 0, 1)">dMaxNetValue;
            </span><span style="color: rgba(0, 0, 255, 1)">if</span> (dMaxRetrace &lt;<span style="color: rgba(0, 0, 0, 1)"> dTmp)
            {
                dMaxRetrace </span>=<span style="color: rgba(0, 0, 0, 1)"> dTmp;

                sprintf(tmpBuf, </span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">-%.2f%%</span><span style="color: rgba(128, 0, 0, 1)">"</span>, dMaxRetrace * <span style="color: rgba(128, 0, 128, 1)">100</span><span style="color: rgba(0, 0, 0, 1)">);
                resultInfo.resMaxRetraceInfo.strValue </span>=<span style="color: rgba(0, 0, 0, 1)"> tmpBuf;
                resultInfo.resMaxRetraceInfo.strBegDate </span>=<span style="color: rgba(0, 0, 0, 1)"> vecNetValueInfo[nMaxPos].strNetValueDate;
                resultInfo.resMaxRetraceInfo.dBegNetValue </span>=<span style="color: rgba(0, 0, 0, 1)"> vecNetValueInfo[nMaxPos].dAccumulatedNet;
                resultInfo.resMaxRetraceInfo.strEndDate </span>=<span style="color: rgba(0, 0, 0, 1)"> vecNetValueInfo[i].strNetValueDate;
                resultInfo.resMaxRetraceInfo.dEndNetValue </span>=<span style="color: rgba(0, 0, 0, 1)"> vecNetValueInfo[i].dAccumulatedNet;
            }

            </span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">看最大上涨率是否需要更新</span>
            dTmp = (dCurrNetValue - dMinNetValue)/<span style="color: rgba(0, 0, 0, 1)">dMinNetValue;
            </span><span style="color: rgba(0, 0, 255, 1)">if</span> (dMaxRise &lt;<span style="color: rgba(0, 0, 0, 1)"> dTmp)
            {
                dMaxRise </span>=<span style="color: rgba(0, 0, 0, 1)"> dTmp;

                sprintf(tmpBuf, </span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">%.2f%%</span><span style="color: rgba(128, 0, 0, 1)">"</span>, dMaxRise * <span style="color: rgba(128, 0, 128, 1)">100</span><span style="color: rgba(0, 0, 0, 1)">);
                resultInfo.resMaxRiseInfo.strValue </span>=<span style="color: rgba(0, 0, 0, 1)"> tmpBuf;
                resultInfo.resMaxRiseInfo.strBegDate </span>=<span style="color: rgba(0, 0, 0, 1)"> vecNetValueInfo[nMinPos].strNetValueDate;
                resultInfo.resMaxRiseInfo.dBegNetValue </span>=<span style="color: rgba(0, 0, 0, 1)"> vecNetValueInfo[nMinPos].dAccumulatedNet;
                resultInfo.resMaxRiseInfo.strEndDate </span>=<span style="color: rgba(0, 0, 0, 1)"> vecNetValueInfo[i].strNetValueDate;
                resultInfo.resMaxRiseInfo.dEndNetValue </span>=<span style="color: rgba(0, 0, 0, 1)"> vecNetValueInfo[i].dAccumulatedNet;
            }
        }

        </span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">最大和最长连续回撤率</span>
<span style="color: rgba(0, 0, 0, 1)">        {
            </span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">看连续回撤率是否需要更新
            </span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">昨天净值大于等于今天净值 认为是回撤</span>
            <span style="color: rgba(0, 0, 255, 1)">if</span> (dLastNetValue &gt;=<span style="color: rgba(0, 0, 0, 1)"> dCurrNetValue)
            {
                </span><span style="color: rgba(0, 0, 255, 1)">if</span><span style="color: rgba(0, 0, 0, 1)"> (bIsRetraceLast)
                {
                    </span>++<span style="color: rgba(0, 0, 0, 1)">nCurrRetraceDays;
                }
                </span><span style="color: rgba(0, 0, 255, 1)">else</span><span style="color: rgba(0, 0, 0, 1)">
                {
                    </span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">开始第一天回撤</span>
                    bIsRetraceLast = <span style="color: rgba(0, 0, 255, 1)">true</span><span style="color: rgba(0, 0, 0, 1)">;
                    nCurrRetraceDays </span>= <span style="color: rgba(128, 0, 128, 1)">1</span><span style="color: rgba(0, 0, 0, 1)">;
                    nBegPosRetrace </span>= i - <span style="color: rgba(128, 0, 128, 1)">1</span><span style="color: rgba(0, 0, 0, 1)">;
                }
            }
            </span><span style="color: rgba(0, 0, 255, 1)">else</span><span style="color: rgba(0, 0, 0, 1)">
            {
                </span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">回撤结束</span>
                <span style="color: rgba(0, 0, 255, 1)">if</span><span style="color: rgba(0, 0, 0, 1)"> (bIsRetraceLast)
                {
                    bIsRetraceLast </span>= <span style="color: rgba(0, 0, 255, 1)">false</span><span style="color: rgba(0, 0, 0, 1)">;
                    </span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">最大连续回撤天数</span>
                    size_t nEndPosRetrace = i - <span style="color: rgba(128, 0, 128, 1)">1</span><span style="color: rgba(0, 0, 0, 1)">;
                    </span><span style="color: rgba(0, 0, 255, 1)">if</span> (nMaxContinuousRetraceDays &lt;<span style="color: rgba(0, 0, 0, 1)"> nCurrRetraceDays)
                    {
                        nMaxContinuousRetraceDays </span>=<span style="color: rgba(0, 0, 0, 1)"> nCurrRetraceDays;
                        resultInfo.resMaxContinRetraceDaysInfo.strValue </span>= itoa(nCurrRetraceDays, tmpBuf, <span style="color: rgba(128, 0, 128, 1)">10</span><span style="color: rgba(0, 0, 0, 1)">);
                        resultInfo.resMaxContinRetraceDaysInfo.strBegDate </span>=<span style="color: rgba(0, 0, 0, 1)"> vecNetValueInfo[nBegPosRetrace].strNetValueDate;
                        resultInfo.resMaxContinRetraceDaysInfo.dBegNetValue </span>=<span style="color: rgba(0, 0, 0, 1)"> vecNetValueInfo[nBegPosRetrace].dAccumulatedNet;
                        resultInfo.resMaxContinRetraceDaysInfo.strEndDate </span>=<span style="color: rgba(0, 0, 0, 1)"> vecNetValueInfo[nEndPosRetrace].strNetValueDate;
                        resultInfo.resMaxContinRetraceDaysInfo.dEndNetValue </span>=<span style="color: rgba(0, 0, 0, 1)"> vecNetValueInfo[nEndPosRetrace].dAccumulatedNet;
                    }

                    </span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">最大连续回撤率</span>
                    dTmp =<span style="color: rgba(0, 0, 0, 1)"> 
                        (vecNetValueInfo[nBegPosRetrace].dAccumulatedNet </span>- vecNetValueInfo[nEndPosRetrace].dAccumulatedNet) /<span style="color: rgba(0, 0, 0, 1)"> vecNetValueInfo[nBegPosRetrace].dAccumulatedNet;
                    </span><span style="color: rgba(0, 0, 255, 1)">if</span> (dMaxContinuousRetrace &lt;<span style="color: rgba(0, 0, 0, 1)"> dTmp)
                    {
                        dMaxContinuousRetrace </span>=<span style="color: rgba(0, 0, 0, 1)"> dTmp;
                        sprintf(tmpBuf, </span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">-%.2f%%</span><span style="color: rgba(128, 0, 0, 1)">"</span>, dMaxContinuousRetrace * <span style="color: rgba(128, 0, 128, 1)">100</span><span style="color: rgba(0, 0, 0, 1)">);
                        resultInfo.resMaxContinRetraceInfo.strValue </span>=<span style="color: rgba(0, 0, 0, 1)"> tmpBuf;

                        resultInfo.resMaxContinRetraceInfo.strBegDate </span>=<span style="color: rgba(0, 0, 0, 1)"> vecNetValueInfo[nBegPosRetrace].strNetValueDate;
                        resultInfo.resMaxContinRetraceInfo.dBegNetValue </span>=<span style="color: rgba(0, 0, 0, 1)"> vecNetValueInfo[nBegPosRetrace].dAccumulatedNet;
                        resultInfo.resMaxContinRetraceInfo.strEndDate </span>=<span style="color: rgba(0, 0, 0, 1)"> vecNetValueInfo[nEndPosRetrace].strNetValueDate;
                        resultInfo.resMaxContinRetraceInfo.dEndNetValue </span>=<span style="color: rgba(0, 0, 0, 1)"> vecNetValueInfo[nEndPosRetrace].dAccumulatedNet;
                    }
                }
            }

            </span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">看连续上涨率是否需要更新
            </span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">昨天净值小于等于今天净值 认为是上涨</span>
            <span style="color: rgba(0, 0, 255, 1)">if</span> (dLastNetValue &lt;=<span style="color: rgba(0, 0, 0, 1)"> dCurrNetValue)
            {
                </span><span style="color: rgba(0, 0, 255, 1)">if</span><span style="color: rgba(0, 0, 0, 1)"> (bIsRiseLast)
                {
                    </span>++<span style="color: rgba(0, 0, 0, 1)">nCurrRiseDays;
                }
                </span><span style="color: rgba(0, 0, 255, 1)">else</span><span style="color: rgba(0, 0, 0, 1)">
                {
                    </span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">开始第一天上涨</span>
                    bIsRiseLast = <span style="color: rgba(0, 0, 255, 1)">true</span><span style="color: rgba(0, 0, 0, 1)">;
                    nCurrRiseDays </span>= <span style="color: rgba(128, 0, 128, 1)">1</span><span style="color: rgba(0, 0, 0, 1)">;
                    nBegPosRise </span>= i - <span style="color: rgba(128, 0, 128, 1)">1</span><span style="color: rgba(0, 0, 0, 1)">;
                }
            }
            </span><span style="color: rgba(0, 0, 255, 1)">else</span><span style="color: rgba(0, 0, 0, 1)">
            {
                </span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">上涨结束</span>
                <span style="color: rgba(0, 0, 255, 1)">if</span><span style="color: rgba(0, 0, 0, 1)"> (bIsRiseLast)
                {
                    bIsRiseLast </span>= <span style="color: rgba(0, 0, 255, 1)">false</span><span style="color: rgba(0, 0, 0, 1)">;
                    </span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">最大连续上涨天数</span>
                    size_t nEndPosRise = i - <span style="color: rgba(128, 0, 128, 1)">1</span><span style="color: rgba(0, 0, 0, 1)">;
                    </span><span style="color: rgba(0, 0, 255, 1)">if</span> (nMaxContinuousRiseDays &lt;<span style="color: rgba(0, 0, 0, 1)"> nCurrRiseDays)
                    {
                        nMaxContinuousRiseDays </span>=<span style="color: rgba(0, 0, 0, 1)"> nCurrRiseDays;
                        resultInfo.resMaxContinRiseDaysInfo.strValue </span>= itoa(nCurrRiseDays, tmpBuf, <span style="color: rgba(128, 0, 128, 1)">10</span><span style="color: rgba(0, 0, 0, 1)">);
                        resultInfo.resMaxContinRiseDaysInfo.strBegDate </span>=<span style="color: rgba(0, 0, 0, 1)"> vecNetValueInfo[nBegPosRise].strNetValueDate;
                        resultInfo.resMaxContinRiseDaysInfo.dBegNetValue </span>=<span style="color: rgba(0, 0, 0, 1)"> vecNetValueInfo[nBegPosRise].dAccumulatedNet;
                        resultInfo.resMaxContinRiseDaysInfo.strEndDate </span>=<span style="color: rgba(0, 0, 0, 1)"> vecNetValueInfo[nEndPosRise].strNetValueDate;
                        resultInfo.resMaxContinRiseDaysInfo.dEndNetValue </span>=<span style="color: rgba(0, 0, 0, 1)"> vecNetValueInfo[nEndPosRise].dAccumulatedNet;
                    }

                    </span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">最大连续上涨率</span>
                    dTmp =<span style="color: rgba(0, 0, 0, 1)"> 
                        (vecNetValueInfo[nEndPosRise].dAccumulatedNet </span>- vecNetValueInfo[nBegPosRise].dAccumulatedNet) /<span style="color: rgba(0, 0, 0, 1)"> vecNetValueInfo[nBegPosRise].dAccumulatedNet;
                    </span><span style="color: rgba(0, 0, 255, 1)">if</span> (dMaxContinuousRise &lt;<span style="color: rgba(0, 0, 0, 1)"> dTmp)
                    {
                        dMaxContinuousRise </span>=<span style="color: rgba(0, 0, 0, 1)"> dTmp;
                        sprintf(tmpBuf, </span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">%.2f%%</span><span style="color: rgba(128, 0, 0, 1)">"</span>, dMaxContinuousRise * <span style="color: rgba(128, 0, 128, 1)">100</span><span style="color: rgba(0, 0, 0, 1)">);
                        resultInfo.resMaxContinRiseInfo.strValue </span>=<span style="color: rgba(0, 0, 0, 1)"> tmpBuf;

                        resultInfo.resMaxContinRiseInfo.strBegDate </span>=<span style="color: rgba(0, 0, 0, 1)"> vecNetValueInfo[nBegPosRise].strNetValueDate;
                        resultInfo.resMaxContinRiseInfo.dBegNetValue </span>=<span style="color: rgba(0, 0, 0, 1)"> vecNetValueInfo[nBegPosRise].dAccumulatedNet;
                        resultInfo.resMaxContinRiseInfo.strEndDate </span>=<span style="color: rgba(0, 0, 0, 1)"> vecNetValueInfo[nEndPosRise].strNetValueDate;
                        resultInfo.resMaxContinRiseInfo.dEndNetValue </span>=<span style="color: rgba(0, 0, 0, 1)"> vecNetValueInfo[nEndPosRise].dAccumulatedNet;
                    }
                }
            }
        }

        dLastNetValue </span>=<span style="color: rgba(0, 0, 0, 1)"> dCurrNetValue;
    }

    </span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">resultInfo.print();</span>

    <span style="color: rgba(0, 0, 255, 1)">return</span> <span style="color: rgba(128, 0, 128, 1)">0</span><span style="color: rgba(0, 0, 0, 1)">;
}


</span><span style="color: rgba(0, 0, 255, 1)">void</span><span style="color: rgba(0, 0, 0, 1)"> testGetRectracement()
{
    vector</span>&lt;NetValueInfo&gt;<span style="color: rgba(0, 0, 0, 1)"> vecNetValueInfo;

    </span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">vecNetValueInfo.push_back(NetValueInfo("2019-01-01", 3.8184));</span>
    vecNetValueInfo.push_back(NetValueInfo(<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">2019-01-02</span><span style="color: rgba(128, 0, 0, 1)">"</span>, <span style="color: rgba(128, 0, 128, 1)">3.6184</span><span style="color: rgba(0, 0, 0, 1)">));
    vecNetValueInfo.push_back(NetValueInfo(</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">2019-01-03</span><span style="color: rgba(128, 0, 0, 1)">"</span>, <span style="color: rgba(128, 0, 128, 1)">3.5699</span><span style="color: rgba(0, 0, 0, 1)">));
    vecNetValueInfo.push_back(NetValueInfo(</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">2019-01-04</span><span style="color: rgba(128, 0, 0, 1)">"</span>, <span style="color: rgba(128, 0, 128, 1)">3.6276</span><span style="color: rgba(0, 0, 0, 1)">));
    vecNetValueInfo.push_back(NetValueInfo(</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">2019-01-07</span><span style="color: rgba(128, 0, 0, 1)">"</span>, <span style="color: rgba(128, 0, 128, 1)">3.6417</span><span style="color: rgba(0, 0, 0, 1)">));
    vecNetValueInfo.push_back(NetValueInfo(</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">2019-01-08</span><span style="color: rgba(128, 0, 0, 1)">"</span>, <span style="color: rgba(128, 0, 128, 1)">3.6464</span><span style="color: rgba(0, 0, 0, 1)">));
    vecNetValueInfo.push_back(NetValueInfo(</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">2019-01-09</span><span style="color: rgba(128, 0, 0, 1)">"</span>, <span style="color: rgba(128, 0, 128, 1)">3.7029</span><span style="color: rgba(0, 0, 0, 1)">));
    vecNetValueInfo.push_back(NetValueInfo(</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">2019-01-10</span><span style="color: rgba(128, 0, 0, 1)">"</span>, <span style="color: rgba(128, 0, 128, 1)">3.6864</span><span style="color: rgba(0, 0, 0, 1)">));
    vecNetValueInfo.push_back(NetValueInfo(</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">2019-01-11</span><span style="color: rgba(128, 0, 0, 1)">"</span>, <span style="color: rgba(128, 0, 128, 1)">3.7087</span><span style="color: rgba(0, 0, 0, 1)">));
    vecNetValueInfo.push_back(NetValueInfo(</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">2019-01-14</span><span style="color: rgba(128, 0, 0, 1)">"</span>, <span style="color: rgba(128, 0, 128, 1)">3.6527</span><span style="color: rgba(0, 0, 0, 1)">));
    vecNetValueInfo.push_back(NetValueInfo(</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">2019-01-15</span><span style="color: rgba(128, 0, 0, 1)">"</span>, <span style="color: rgba(128, 0, 128, 1)">3.7808</span><span style="color: rgba(0, 0, 0, 1)">));
    vecNetValueInfo.push_back(NetValueInfo(</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">2019-01-16</span><span style="color: rgba(128, 0, 0, 1)">"</span>, <span style="color: rgba(128, 0, 128, 1)">3.7773</span><span style="color: rgba(0, 0, 0, 1)">));
    vecNetValueInfo.push_back(NetValueInfo(</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">2019-01-17</span><span style="color: rgba(128, 0, 0, 1)">"</span>, <span style="color: rgba(128, 0, 128, 1)">3.7721</span><span style="color: rgba(0, 0, 0, 1)">));
    vecNetValueInfo.push_back(NetValueInfo(</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">2019-01-18</span><span style="color: rgba(128, 0, 0, 1)">"</span>, <span style="color: rgba(128, 0, 128, 1)">3.8566</span><span style="color: rgba(0, 0, 0, 1)">));
    vecNetValueInfo.push_back(NetValueInfo(</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">2019-01-21</span><span style="color: rgba(128, 0, 0, 1)">"</span>, <span style="color: rgba(128, 0, 128, 1)">3.8955</span><span style="color: rgba(0, 0, 0, 1)">));
    vecNetValueInfo.push_back(NetValueInfo(</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">2019-01-22</span><span style="color: rgba(128, 0, 0, 1)">"</span>, <span style="color: rgba(128, 0, 128, 1)">3.8324</span><span style="color: rgba(0, 0, 0, 1)">));
    vecNetValueInfo.push_back(NetValueInfo(</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">2019-01-23</span><span style="color: rgba(128, 0, 0, 1)">"</span>, <span style="color: rgba(128, 0, 128, 1)">3.8182</span><span style="color: rgba(0, 0, 0, 1)">));
    vecNetValueInfo.push_back(NetValueInfo(</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">2019-01-24</span><span style="color: rgba(128, 0, 0, 1)">"</span>, <span style="color: rgba(128, 0, 128, 1)">3.839</span><span style="color: rgba(0, 0, 0, 1)">));
    vecNetValueInfo.push_back(NetValueInfo(</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">2019-01-25</span><span style="color: rgba(128, 0, 0, 1)">"</span>, <span style="color: rgba(128, 0, 128, 1)">3.8749</span><span style="color: rgba(0, 0, 0, 1)">));
    vecNetValueInfo.push_back(NetValueInfo(</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">2019-01-28</span><span style="color: rgba(128, 0, 0, 1)">"</span>, <span style="color: rgba(128, 0, 128, 1)">3.9008</span><span style="color: rgba(0, 0, 0, 1)">));
    vecNetValueInfo.push_back(NetValueInfo(</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">2019-01-29</span><span style="color: rgba(128, 0, 0, 1)">"</span>, <span style="color: rgba(128, 0, 128, 1)">3.9123</span><span style="color: rgba(0, 0, 0, 1)">));
    vecNetValueInfo.push_back(NetValueInfo(</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">2019-01-30</span><span style="color: rgba(128, 0, 0, 1)">"</span>, <span style="color: rgba(128, 0, 128, 1)">3.8597</span><span style="color: rgba(0, 0, 0, 1)">));
    vecNetValueInfo.push_back(NetValueInfo(</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">2019-01-31</span><span style="color: rgba(128, 0, 0, 1)">"</span>, <span style="color: rgba(128, 0, 128, 1)">3.9123</span><span style="color: rgba(0, 0, 0, 1)">));
    vecNetValueInfo.push_back(NetValueInfo(</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">2019-02-01</span><span style="color: rgba(128, 0, 0, 1)">"</span>, <span style="color: rgba(128, 0, 128, 1)">3.9763</span><span style="color: rgba(0, 0, 0, 1)">));
    vecNetValueInfo.push_back(NetValueInfo(</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">2019-02-11</span><span style="color: rgba(128, 0, 0, 1)">"</span>, <span style="color: rgba(128, 0, 128, 1)">4.0967</span><span style="color: rgba(0, 0, 0, 1)">));
    vecNetValueInfo.push_back(NetValueInfo(</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">2019-02-12</span><span style="color: rgba(128, 0, 0, 1)">"</span>, <span style="color: rgba(128, 0, 128, 1)">4.116</span><span style="color: rgba(0, 0, 0, 1)">));
    vecNetValueInfo.push_back(NetValueInfo(</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">2019-02-13</span><span style="color: rgba(128, 0, 0, 1)">"</span>, <span style="color: rgba(128, 0, 128, 1)">4.169</span><span style="color: rgba(0, 0, 0, 1)">));
    vecNetValueInfo.push_back(NetValueInfo(</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">2019-02-14</span><span style="color: rgba(128, 0, 0, 1)">"</span>, <span style="color: rgba(128, 0, 128, 1)">4.2157</span><span style="color: rgba(0, 0, 0, 1)">));
    vecNetValueInfo.push_back(NetValueInfo(</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">2019-02-15</span><span style="color: rgba(128, 0, 0, 1)">"</span>, <span style="color: rgba(128, 0, 128, 1)">4.1325</span><span style="color: rgba(0, 0, 0, 1)">));
    vecNetValueInfo.push_back(NetValueInfo(</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">2019-02-18</span><span style="color: rgba(128, 0, 0, 1)">"</span>, <span style="color: rgba(128, 0, 128, 1)">4.2385</span><span style="color: rgba(0, 0, 0, 1)">));
    vecNetValueInfo.push_back(NetValueInfo(</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">2019-02-19</span><span style="color: rgba(128, 0, 0, 1)">"</span>, <span style="color: rgba(128, 0, 128, 1)">4.2204</span><span style="color: rgba(0, 0, 0, 1)">));
    vecNetValueInfo.push_back(NetValueInfo(</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">2019-02-20</span><span style="color: rgba(128, 0, 0, 1)">"</span>, <span style="color: rgba(128, 0, 128, 1)">4.2307</span><span style="color: rgba(0, 0, 0, 1)">));
    vecNetValueInfo.push_back(NetValueInfo(</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">2019-02-21</span><span style="color: rgba(128, 0, 0, 1)">"</span>, <span style="color: rgba(128, 0, 128, 1)">4.2244</span><span style="color: rgba(0, 0, 0, 1)">));
    vecNetValueInfo.push_back(NetValueInfo(</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">2019-02-22</span><span style="color: rgba(128, 0, 0, 1)">"</span>, <span style="color: rgba(128, 0, 128, 1)">4.262</span><span style="color: rgba(0, 0, 0, 1)">));
    vecNetValueInfo.push_back(NetValueInfo(</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">2019-02-25</span><span style="color: rgba(128, 0, 0, 1)">"</span>, <span style="color: rgba(128, 0, 128, 1)">4.3901</span><span style="color: rgba(0, 0, 0, 1)">));
    vecNetValueInfo.push_back(NetValueInfo(</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">2019-02-26</span><span style="color: rgba(128, 0, 0, 1)">"</span>, <span style="color: rgba(128, 0, 128, 1)">4.3299</span><span style="color: rgba(0, 0, 0, 1)">));
    vecNetValueInfo.push_back(NetValueInfo(</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">2019-02-27</span><span style="color: rgba(128, 0, 0, 1)">"</span>, <span style="color: rgba(128, 0, 128, 1)">4.3243</span><span style="color: rgba(0, 0, 0, 1)">));
    vecNetValueInfo.push_back(NetValueInfo(</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">2019-02-28</span><span style="color: rgba(128, 0, 0, 1)">"</span>, <span style="color: rgba(128, 0, 128, 1)">4.3617</span><span style="color: rgba(0, 0, 0, 1)">));
    vecNetValueInfo.push_back(NetValueInfo(</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">2019-03-01</span><span style="color: rgba(128, 0, 0, 1)">"</span>, <span style="color: rgba(128, 0, 128, 1)">4.4804</span><span style="color: rgba(0, 0, 0, 1)">));
    vecNetValueInfo.push_back(NetValueInfo(</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">2019-03-04</span><span style="color: rgba(128, 0, 0, 1)">"</span>, <span style="color: rgba(128, 0, 128, 1)">4.5156</span><span style="color: rgba(0, 0, 0, 1)">));
    vecNetValueInfo.push_back(NetValueInfo(</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">2019-03-05</span><span style="color: rgba(128, 0, 0, 1)">"</span>, <span style="color: rgba(128, 0, 128, 1)">4.5079</span><span style="color: rgba(0, 0, 0, 1)">));
    vecNetValueInfo.push_back(NetValueInfo(</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">2019-03-06</span><span style="color: rgba(128, 0, 0, 1)">"</span>, <span style="color: rgba(128, 0, 128, 1)">4.4816</span><span style="color: rgba(0, 0, 0, 1)">));
    vecNetValueInfo.push_back(NetValueInfo(</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">2019-03-07</span><span style="color: rgba(128, 0, 0, 1)">"</span>, <span style="color: rgba(128, 0, 128, 1)">4.3819</span><span style="color: rgba(0, 0, 0, 1)">));
    vecNetValueInfo.push_back(NetValueInfo(</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">2019-03-08</span><span style="color: rgba(128, 0, 0, 1)">"</span>, <span style="color: rgba(128, 0, 128, 1)">4.294</span><span style="color: rgba(0, 0, 0, 1)">));
    vecNetValueInfo.push_back(NetValueInfo(</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">2019-03-11</span><span style="color: rgba(128, 0, 0, 1)">"</span>, <span style="color: rgba(128, 0, 128, 1)">4.4107</span><span style="color: rgba(0, 0, 0, 1)">));
    vecNetValueInfo.push_back(NetValueInfo(</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">2019-03-12</span><span style="color: rgba(128, 0, 0, 1)">"</span>, <span style="color: rgba(128, 0, 128, 1)">4.3957</span><span style="color: rgba(0, 0, 0, 1)">));
    vecNetValueInfo.push_back(NetValueInfo(</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">2019-03-13</span><span style="color: rgba(128, 0, 0, 1)">"</span>, <span style="color: rgba(128, 0, 128, 1)">4.4</span><span style="color: rgba(0, 0, 0, 1)">));
    vecNetValueInfo.push_back(NetValueInfo(</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">2019-03-14</span><span style="color: rgba(128, 0, 0, 1)">"</span>, <span style="color: rgba(128, 0, 128, 1)">4.4248</span><span style="color: rgba(0, 0, 0, 1)">));
    vecNetValueInfo.push_back(NetValueInfo(</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">2019-03-15</span><span style="color: rgba(128, 0, 0, 1)">"</span>, <span style="color: rgba(128, 0, 128, 1)">4.5086</span><span style="color: rgba(0, 0, 0, 1)">));
    vecNetValueInfo.push_back(NetValueInfo(</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">2019-03-18</span><span style="color: rgba(128, 0, 0, 1)">"</span>, <span style="color: rgba(128, 0, 128, 1)">4.6918</span><span style="color: rgba(0, 0, 0, 1)">));
    vecNetValueInfo.push_back(NetValueInfo(</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">2019-03-19</span><span style="color: rgba(128, 0, 0, 1)">"</span>, <span style="color: rgba(128, 0, 128, 1)">4.655</span><span style="color: rgba(0, 0, 0, 1)">));
    vecNetValueInfo.push_back(NetValueInfo(</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">2019-03-20</span><span style="color: rgba(128, 0, 0, 1)">"</span>, <span style="color: rgba(128, 0, 128, 1)">4.6547</span><span style="color: rgba(0, 0, 0, 1)">));
    vecNetValueInfo.push_back(NetValueInfo(</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">2019-03-21</span><span style="color: rgba(128, 0, 0, 1)">"</span>, <span style="color: rgba(128, 0, 128, 1)">4.6234</span><span style="color: rgba(0, 0, 0, 1)">));
    vecNetValueInfo.push_back(NetValueInfo(</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">2019-03-22</span><span style="color: rgba(128, 0, 0, 1)">"</span>, <span style="color: rgba(128, 0, 128, 1)">4.6526</span><span style="color: rgba(0, 0, 0, 1)">));
    vecNetValueInfo.push_back(NetValueInfo(</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">2019-03-25</span><span style="color: rgba(128, 0, 0, 1)">"</span>, <span style="color: rgba(128, 0, 128, 1)">4.5371</span><span style="color: rgba(0, 0, 0, 1)">));
    vecNetValueInfo.push_back(NetValueInfo(</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">2019-03-26</span><span style="color: rgba(128, 0, 0, 1)">"</span>, <span style="color: rgba(128, 0, 128, 1)">4.5402</span><span style="color: rgba(0, 0, 0, 1)">));
    vecNetValueInfo.push_back(NetValueInfo(</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">2019-03-27</span><span style="color: rgba(128, 0, 0, 1)">"</span>, <span style="color: rgba(128, 0, 128, 1)">4.6341</span><span style="color: rgba(0, 0, 0, 1)">));
    vecNetValueInfo.push_back(NetValueInfo(</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">2019-03-28</span><span style="color: rgba(128, 0, 0, 1)">"</span>, <span style="color: rgba(128, 0, 128, 1)">4.6845</span><span style="color: rgba(0, 0, 0, 1)">));
    vecNetValueInfo.push_back(NetValueInfo(</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">2019-03-29</span><span style="color: rgba(128, 0, 0, 1)">"</span>, <span style="color: rgba(128, 0, 128, 1)">4.8498</span><span style="color: rgba(0, 0, 0, 1)">));
    vecNetValueInfo.push_back(NetValueInfo(</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">2019-04-01</span><span style="color: rgba(128, 0, 0, 1)">"</span>, <span style="color: rgba(128, 0, 128, 1)">4.9265</span><span style="color: rgba(0, 0, 0, 1)">));
    vecNetValueInfo.push_back(NetValueInfo(</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">2019-04-02</span><span style="color: rgba(128, 0, 0, 1)">"</span>, <span style="color: rgba(128, 0, 128, 1)">4.8873</span><span style="color: rgba(0, 0, 0, 1)">));
    vecNetValueInfo.push_back(NetValueInfo(</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">2019-04-03</span><span style="color: rgba(128, 0, 0, 1)">"</span>, <span style="color: rgba(128, 0, 128, 1)">4.8872</span><span style="color: rgba(0, 0, 0, 1)">));
    vecNetValueInfo.push_back(NetValueInfo(</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">2019-04-04</span><span style="color: rgba(128, 0, 0, 1)">"</span>, <span style="color: rgba(128, 0, 128, 1)">4.9498</span><span style="color: rgba(0, 0, 0, 1)">));
    vecNetValueInfo.push_back(NetValueInfo(</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">2019-04-08</span><span style="color: rgba(128, 0, 0, 1)">"</span>, <span style="color: rgba(128, 0, 128, 1)">4.9596</span><span style="color: rgba(0, 0, 0, 1)">));
    vecNetValueInfo.push_back(NetValueInfo(</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">2019-04-09</span><span style="color: rgba(128, 0, 0, 1)">"</span>, <span style="color: rgba(128, 0, 128, 1)">5.0425</span><span style="color: rgba(0, 0, 0, 1)">));
    vecNetValueInfo.push_back(NetValueInfo(</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">2019-04-10</span><span style="color: rgba(128, 0, 0, 1)">"</span>, <span style="color: rgba(128, 0, 128, 1)">5.1024</span><span style="color: rgba(0, 0, 0, 1)">));
    vecNetValueInfo.push_back(NetValueInfo(</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">2019-04-11</span><span style="color: rgba(128, 0, 0, 1)">"</span>, <span style="color: rgba(128, 0, 128, 1)">4.9415</span><span style="color: rgba(0, 0, 0, 1)">));
    vecNetValueInfo.push_back(NetValueInfo(</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">2019-04-12</span><span style="color: rgba(128, 0, 0, 1)">"</span>, <span style="color: rgba(128, 0, 128, 1)">4.921</span><span style="color: rgba(0, 0, 0, 1)">));
    vecNetValueInfo.push_back(NetValueInfo(</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">2019-04-15</span><span style="color: rgba(128, 0, 0, 1)">"</span>, <span style="color: rgba(128, 0, 128, 1)">4.8815</span><span style="color: rgba(0, 0, 0, 1)">));
    vecNetValueInfo.push_back(NetValueInfo(</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">2019-04-16</span><span style="color: rgba(128, 0, 0, 1)">"</span>, <span style="color: rgba(128, 0, 128, 1)">4.9717</span><span style="color: rgba(0, 0, 0, 1)">));
    vecNetValueInfo.push_back(NetValueInfo(</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">2019-04-17</span><span style="color: rgba(128, 0, 0, 1)">"</span>, <span style="color: rgba(128, 0, 128, 1)">4.9893</span><span style="color: rgba(0, 0, 0, 1)">));
    vecNetValueInfo.push_back(NetValueInfo(</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">2019-04-18</span><span style="color: rgba(128, 0, 0, 1)">"</span>, <span style="color: rgba(128, 0, 128, 1)">4.9827</span><span style="color: rgba(0, 0, 0, 1)">));
    vecNetValueInfo.push_back(NetValueInfo(</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">2019-04-19</span><span style="color: rgba(128, 0, 0, 1)">"</span>, <span style="color: rgba(128, 0, 128, 1)">5.0434</span><span style="color: rgba(0, 0, 0, 1)">));
    vecNetValueInfo.push_back(NetValueInfo(</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">2019-04-22</span><span style="color: rgba(128, 0, 0, 1)">"</span>, <span style="color: rgba(128, 0, 128, 1)">4.9983</span><span style="color: rgba(0, 0, 0, 1)">));
    vecNetValueInfo.push_back(NetValueInfo(</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">2019-04-23</span><span style="color: rgba(128, 0, 0, 1)">"</span>, <span style="color: rgba(128, 0, 128, 1)">5.0508</span><span style="color: rgba(0, 0, 0, 1)">));
    vecNetValueInfo.push_back(NetValueInfo(</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">2019-04-24</span><span style="color: rgba(128, 0, 0, 1)">"</span>, <span style="color: rgba(128, 0, 128, 1)">5.0265</span><span style="color: rgba(0, 0, 0, 1)">));
    vecNetValueInfo.push_back(NetValueInfo(</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">2019-04-25</span><span style="color: rgba(128, 0, 0, 1)">"</span>, <span style="color: rgba(128, 0, 128, 1)">4.9531</span><span style="color: rgba(0, 0, 0, 1)">));
    vecNetValueInfo.push_back(NetValueInfo(</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">2019-04-26</span><span style="color: rgba(128, 0, 0, 1)">"</span>, <span style="color: rgba(128, 0, 128, 1)">4.9318</span><span style="color: rgba(0, 0, 0, 1)">));
    vecNetValueInfo.push_back(NetValueInfo(</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">2019-04-29</span><span style="color: rgba(128, 0, 0, 1)">"</span>, <span style="color: rgba(128, 0, 128, 1)">5.0159</span><span style="color: rgba(0, 0, 0, 1)">));
    vecNetValueInfo.push_back(NetValueInfo(</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">2019-04-30</span><span style="color: rgba(128, 0, 0, 1)">"</span>, <span style="color: rgba(128, 0, 128, 1)">5.0403</span><span style="color: rgba(0, 0, 0, 1)">));
    vecNetValueInfo.push_back(NetValueInfo(</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">2019-05-06</span><span style="color: rgba(128, 0, 0, 1)">"</span>, <span style="color: rgba(128, 0, 128, 1)">4.7775</span><span style="color: rgba(0, 0, 0, 1)">));
    vecNetValueInfo.push_back(NetValueInfo(</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">2019-05-07</span><span style="color: rgba(128, 0, 0, 1)">"</span>, <span style="color: rgba(128, 0, 128, 1)">4.8874</span><span style="color: rgba(0, 0, 0, 1)">));
    vecNetValueInfo.push_back(NetValueInfo(</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">2019-05-08</span><span style="color: rgba(128, 0, 0, 1)">"</span>, <span style="color: rgba(128, 0, 128, 1)">4.831</span><span style="color: rgba(0, 0, 0, 1)">));
    vecNetValueInfo.push_back(NetValueInfo(</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">2019-05-09</span><span style="color: rgba(128, 0, 0, 1)">"</span>, <span style="color: rgba(128, 0, 128, 1)">4.6981</span><span style="color: rgba(0, 0, 0, 1)">));
    vecNetValueInfo.push_back(NetValueInfo(</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">2019-05-10</span><span style="color: rgba(128, 0, 0, 1)">"</span>, <span style="color: rgba(128, 0, 128, 1)">4.9068</span><span style="color: rgba(0, 0, 0, 1)">));
    vecNetValueInfo.push_back(NetValueInfo(</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">2019-05-13</span><span style="color: rgba(128, 0, 0, 1)">"</span>, <span style="color: rgba(128, 0, 128, 1)">4.8639</span><span style="color: rgba(0, 0, 0, 1)">));
    vecNetValueInfo.push_back(NetValueInfo(</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">2019-05-14</span><span style="color: rgba(128, 0, 0, 1)">"</span>, <span style="color: rgba(128, 0, 128, 1)">4.8238</span><span style="color: rgba(0, 0, 0, 1)">));
    vecNetValueInfo.push_back(NetValueInfo(</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">2019-05-15</span><span style="color: rgba(128, 0, 0, 1)">"</span>, <span style="color: rgba(128, 0, 128, 1)">5.0074</span><span style="color: rgba(0, 0, 0, 1)">));
    vecNetValueInfo.push_back(NetValueInfo(</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">2019-05-16</span><span style="color: rgba(128, 0, 0, 1)">"</span>, <span style="color: rgba(128, 0, 128, 1)">5.0627</span><span style="color: rgba(0, 0, 0, 1)">));
    vecNetValueInfo.push_back(NetValueInfo(</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">2019-05-17</span><span style="color: rgba(128, 0, 0, 1)">"</span>, <span style="color: rgba(128, 0, 128, 1)">4.9514</span><span style="color: rgba(0, 0, 0, 1)">));
    vecNetValueInfo.push_back(NetValueInfo(</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">2019-05-20</span><span style="color: rgba(128, 0, 0, 1)">"</span>, <span style="color: rgba(128, 0, 128, 1)">4.8840</span><span style="color: rgba(0, 0, 0, 1)">));
    vecNetValueInfo.push_back(NetValueInfo(</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">2019-05-21</span><span style="color: rgba(128, 0, 0, 1)">"</span>, <span style="color: rgba(128, 0, 128, 1)">4.9350</span><span style="color: rgba(0, 0, 0, 1)">));
    vecNetValueInfo.push_back(NetValueInfo(</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">2019-05-22</span><span style="color: rgba(128, 0, 0, 1)">"</span>, <span style="color: rgba(128, 0, 128, 1)">4.9049</span><span style="color: rgba(0, 0, 0, 1)">));
    vecNetValueInfo.push_back(NetValueInfo(</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">2019-05-23</span><span style="color: rgba(128, 0, 0, 1)">"</span>, <span style="color: rgba(128, 0, 128, 1)">4.8145</span><span style="color: rgba(0, 0, 0, 1)">));
    vecNetValueInfo.push_back(NetValueInfo(</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">2019-05-24</span><span style="color: rgba(128, 0, 0, 1)">"</span>, <span style="color: rgba(128, 0, 128, 1)">4.8299</span><span style="color: rgba(0, 0, 0, 1)">));
    vecNetValueInfo.push_back(NetValueInfo(</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">2019-05-27</span><span style="color: rgba(128, 0, 0, 1)">"</span>, <span style="color: rgba(128, 0, 128, 1)">4.8482</span><span style="color: rgba(0, 0, 0, 1)">));
    vecNetValueInfo.push_back(NetValueInfo(</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">2019-05-28</span><span style="color: rgba(128, 0, 0, 1)">"</span>, <span style="color: rgba(128, 0, 128, 1)">4.9015</span><span style="color: rgba(0, 0, 0, 1)">));
    vecNetValueInfo.push_back(NetValueInfo(</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">2019-05-29</span><span style="color: rgba(128, 0, 0, 1)">"</span>, <span style="color: rgba(128, 0, 128, 1)">4.8845</span><span style="color: rgba(0, 0, 0, 1)">));
    vecNetValueInfo.push_back(NetValueInfo(</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">2019-05-30</span><span style="color: rgba(128, 0, 0, 1)">"</span>, <span style="color: rgba(128, 0, 128, 1)">4.8609</span><span style="color: rgba(0, 0, 0, 1)">));
    vecNetValueInfo.push_back(NetValueInfo(</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">2019-05-31</span><span style="color: rgba(128, 0, 0, 1)">"</span>, <span style="color: rgba(128, 0, 128, 1)">4.8433</span><span style="color: rgba(0, 0, 0, 1)">));

    ResultInfo resultInfo;
    size_t nBegPos </span>= <span style="color: rgba(128, 0, 128, 1)">58</span>, nEndPos =<span style="color: rgba(0, 0, 0, 1)"> vecNetValueInfo.size();
    getRectracement(vecNetValueInfo, nBegPos, nEndPos, resultInfo);

    cout </span>&lt;&lt; <span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">分析起止日期:[</span><span style="color: rgba(128, 0, 0, 1)">"</span> &lt;&lt; vecNetValueInfo[nBegPos].strNetValueDate &lt;&lt; <span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">,</span><span style="color: rgba(128, 0, 0, 1)">"</span> &lt;&lt; vecNetValueInfo[nEndPos - <span style="color: rgba(128, 0, 128, 1)">1</span>].strNetValueDate &lt;&lt; <span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">]</span><span style="color: rgba(128, 0, 0, 1)">"</span> &lt;&lt;<span style="color: rgba(0, 0, 0, 1)"> endl;
    resultInfo.print();
}</span></pre>
</div>
<p>stdafx.cpp</p>
<div class="cnblogs_code">
<pre><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> stdafx.cpp : 只包括标准包含文件的源文件
</span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> getFundNetValue.pch 将作为预编译头
</span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> stdafx.obj 将包含预编译类型信息</span>
<span style="color: rgba(0, 0, 0, 1)">
#include </span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">stdafx.h</span><span style="color: rgba(128, 0, 0, 1)">"</span>

<span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> TODO: 在 STDAFX.H 中
</span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 引用任何所需的附加头文件，而不是在此文件中引用</span>

<span style="color: rgba(0, 0, 255, 1)">const</span> <span style="color: rgba(0, 0, 255, 1)">string</span>&amp; stringReplace(<span style="color: rgba(0, 0, 255, 1)">string</span>&amp; str, <span style="color: rgba(0, 0, 255, 1)">const</span> <span style="color: rgba(0, 0, 255, 1)">string</span>&amp; strToReplace, <span style="color: rgba(0, 0, 255, 1)">const</span> <span style="color: rgba(0, 0, 255, 1)">string</span>&amp;<span style="color: rgba(0, 0, 0, 1)"> strReplaceTo)
{
    size_t pos </span>=<span style="color: rgba(0, 0, 0, 1)"> str.find(strToReplace);
    </span><span style="color: rgba(0, 0, 255, 1)">if</span> (pos != <span style="color: rgba(0, 0, 255, 1)">string</span><span style="color: rgba(0, 0, 0, 1)">::npos)
    {
        str.replace(pos, strToReplace.size(), strReplaceTo);
    }

    </span><span style="color: rgba(0, 0, 255, 1)">return</span><span style="color: rgba(0, 0, 0, 1)"> str;
}

</span><span style="color: rgba(0, 0, 255, 1)">char</span> *stringReplace(<span style="color: rgba(0, 0, 255, 1)">char</span> *str, <span style="color: rgba(0, 0, 255, 1)">const</span> <span style="color: rgba(0, 0, 255, 1)">char</span> *strToReplace, <span style="color: rgba(0, 0, 255, 1)">const</span> <span style="color: rgba(0, 0, 255, 1)">char</span> *<span style="color: rgba(0, 0, 0, 1)">strReplaceTo)
{
    size_t cntOld </span>=<span style="color: rgba(0, 0, 0, 1)"> strlen(strToReplace);
    size_t cntNew </span>=<span style="color: rgba(0, 0, 0, 1)"> strlen(strReplaceTo);

    </span><span style="color: rgba(0, 0, 255, 1)">if</span> (cntNew == cntOld &amp;&amp; strcmp(strReplaceTo, strToReplace) == <span style="color: rgba(128, 0, 128, 1)">0</span><span style="color: rgba(0, 0, 0, 1)">)
    {
        </span><span style="color: rgba(0, 0, 255, 1)">return</span><span style="color: rgba(0, 0, 0, 1)"> str;
    }

    </span><span style="color: rgba(0, 0, 255, 1)">char</span> *p =<span style="color: rgba(0, 0, 0, 1)"> strstr(str, strToReplace);
    </span><span style="color: rgba(0, 0, 255, 1)">if</span> (p ==<span style="color: rgba(0, 0, 0, 1)"> NULL)
    {
        </span><span style="color: rgba(0, 0, 255, 1)">return</span><span style="color: rgba(0, 0, 0, 1)"> str;
    }

    </span><span style="color: rgba(0, 0, 255, 1)">if</span> (cntOld &lt;<span style="color: rgba(0, 0, 0, 1)"> cntNew)
    {
        </span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">先找到原字符串尾部\0的位置</span>
        <span style="color: rgba(0, 0, 255, 1)">char</span> *endpos =<span style="color: rgba(0, 0, 0, 1)"> p;
        </span><span style="color: rgba(0, 0, 255, 1)">while</span>(*<span style="color: rgba(0, 0, 0, 1)">endpos)
        {
            endpos</span>++<span style="color: rgba(0, 0, 0, 1)">;
        }

        </span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">将字符串从尾部起，每个字符向后移动cntNew - cntOld个位置</span>
        <span style="color: rgba(0, 0, 255, 1)">while</span> (endpos &gt;= p +<span style="color: rgba(0, 0, 0, 1)"> cntOld)
        {
            </span>*(endpos + cntNew - cntOld) = *<span style="color: rgba(0, 0, 0, 1)">endpos;
            endpos</span>--<span style="color: rgba(0, 0, 0, 1)">;
        }

        memcpy(p, strReplaceTo, cntNew);

    }
    </span><span style="color: rgba(0, 0, 255, 1)">else</span> <span style="color: rgba(0, 0, 255, 1)">if</span> (cntNew ==<span style="color: rgba(0, 0, 0, 1)"> cntOld)
    {
        memcpy(p, strReplaceTo, cntNew);
    }
    </span><span style="color: rgba(0, 0, 255, 1)">else</span><span style="color: rgba(0, 0, 0, 1)">
    {
        memcpy(p, strReplaceTo, cntNew);
        memmove(p </span>+ cntNew, p + cntOld, strlen(p + cntOld) + <span style="color: rgba(128, 0, 128, 1)">1</span><span style="color: rgba(0, 0, 0, 1)">);
    }

    </span><span style="color: rgba(0, 0, 255, 1)">return</span><span style="color: rgba(0, 0, 0, 1)"> str;
}

</span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">GBK编码转换到UTF8编码</span>
<span style="color: rgba(0, 0, 255, 1)">int</span> GBKToUTF8(<span style="color: rgba(0, 0, 255, 1)">const</span> <span style="color: rgba(0, 0, 255, 1)">char</span> *lpGBKStr, <span style="color: rgba(0, 0, 255, 1)">char</span> *lpUTF8Str, <span style="color: rgba(0, 0, 255, 1)">int</span><span style="color: rgba(0, 0, 0, 1)"> nUTF8StrLen)
{
    wchar_t </span>*lpUnicodeStr =<span style="color: rgba(0, 0, 0, 1)"> NULL;
    </span><span style="color: rgba(0, 0, 255, 1)">int</span> nRetLen = <span style="color: rgba(128, 0, 128, 1)">0</span><span style="color: rgba(0, 0, 0, 1)">;

    </span><span style="color: rgba(0, 0, 255, 1)">if</span>(!lpGBKStr)  <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">如果GBK字符串为NULL则出错退出</span>
        <span style="color: rgba(0, 0, 255, 1)">return</span> <span style="color: rgba(128, 0, 128, 1)">0</span><span style="color: rgba(0, 0, 0, 1)">;

    nRetLen </span>= ::MultiByteToWideChar(CP_ACP, <span style="color: rgba(128, 0, 128, 1)">0</span>, lpGBKStr, -<span style="color: rgba(128, 0, 128, 1)">1</span>, NULL, NULL);  <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">获取转换到Unicode编码后所需要的字符空间长度</span>
    lpUnicodeStr = <span style="color: rgba(0, 0, 255, 1)">new</span> WCHAR[nRetLen + <span style="color: rgba(128, 0, 128, 1)">1</span>];  <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">为Unicode字符串空间</span>
    nRetLen = ::MultiByteToWideChar(CP_ACP, <span style="color: rgba(128, 0, 128, 1)">0</span>, lpGBKStr, -<span style="color: rgba(128, 0, 128, 1)">1</span>, lpUnicodeStr, nRetLen);  <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">转换到Unicode编码</span>
    <span style="color: rgba(0, 0, 255, 1)">if</span>(!nRetLen)  <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">转换失败则出错退出</span>
        <span style="color: rgba(0, 0, 255, 1)">return</span> <span style="color: rgba(128, 0, 128, 1)">0</span><span style="color: rgba(0, 0, 0, 1)">;

    nRetLen </span>= ::WideCharToMultiByte(CP_UTF8, <span style="color: rgba(128, 0, 128, 1)">0</span>, lpUnicodeStr, -<span style="color: rgba(128, 0, 128, 1)">1</span>, NULL, <span style="color: rgba(128, 0, 128, 1)">0</span>, NULL, NULL);  <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">获取转换到UTF8编码后所需要的字符空间长度</span>

    <span style="color: rgba(0, 0, 255, 1)">if</span>(!lpUTF8Str)  <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">输出缓冲区为空则返回转换后需要的空间大小</span>
<span style="color: rgba(0, 0, 0, 1)">    {
        </span><span style="color: rgba(0, 0, 255, 1)">if</span><span style="color: rgba(0, 0, 0, 1)">(lpUnicodeStr)
            </span><span style="color: rgba(0, 0, 255, 1)">delete</span><span style="color: rgba(0, 0, 0, 1)"> []lpUnicodeStr;
        </span><span style="color: rgba(0, 0, 255, 1)">return</span><span style="color: rgba(0, 0, 0, 1)"> nRetLen;
    }

    </span><span style="color: rgba(0, 0, 255, 1)">if</span>(nUTF8StrLen &lt; nRetLen)  <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">如果输出缓冲区长度不够则退出</span>
<span style="color: rgba(0, 0, 0, 1)">    {
        </span><span style="color: rgba(0, 0, 255, 1)">if</span><span style="color: rgba(0, 0, 0, 1)">(lpUnicodeStr)
            </span><span style="color: rgba(0, 0, 255, 1)">delete</span><span style="color: rgba(0, 0, 0, 1)"> []lpUnicodeStr;
        </span><span style="color: rgba(0, 0, 255, 1)">return</span> <span style="color: rgba(128, 0, 128, 1)">0</span><span style="color: rgba(0, 0, 0, 1)">;
    }

    nRetLen </span>= ::WideCharToMultiByte(CP_UTF8,<span style="color: rgba(128, 0, 128, 1)">0</span>,lpUnicodeStr,-<span style="color: rgba(128, 0, 128, 1)">1</span>,(<span style="color: rgba(0, 0, 255, 1)">char</span> *)lpUTF8Str,nUTF8StrLen,NULL,NULL);  <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">转换到UTF8编码</span>

    <span style="color: rgba(0, 0, 255, 1)">if</span><span style="color: rgba(0, 0, 0, 1)">(lpUnicodeStr)
        </span><span style="color: rgba(0, 0, 255, 1)">delete</span><span style="color: rgba(0, 0, 0, 1)"> []lpUnicodeStr;

    </span><span style="color: rgba(0, 0, 255, 1)">return</span><span style="color: rgba(0, 0, 0, 1)"> nRetLen;
}


</span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> UTF8编码转换到GBK编码</span>
<span style="color: rgba(0, 0, 255, 1)">int</span> UTF8ToGBK(<span style="color: rgba(0, 0, 255, 1)">const</span> <span style="color: rgba(0, 0, 255, 1)">char</span> *lpUTF8Str, <span style="color: rgba(0, 0, 255, 1)">char</span> *lpGBKStr,<span style="color: rgba(0, 0, 255, 1)">int</span><span style="color: rgba(0, 0, 0, 1)"> nGBKStrLen)
{
    wchar_t </span>* lpUnicodeStr =<span style="color: rgba(0, 0, 0, 1)"> NULL;
    </span><span style="color: rgba(0, 0, 255, 1)">int</span> nRetLen = <span style="color: rgba(128, 0, 128, 1)">0</span><span style="color: rgba(0, 0, 0, 1)">;

    </span><span style="color: rgba(0, 0, 255, 1)">if</span>(!lpUTF8Str)  <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">如果UTF8字符串为NULL则出错退出</span>
        <span style="color: rgba(0, 0, 255, 1)">return</span> <span style="color: rgba(128, 0, 128, 1)">0</span><span style="color: rgba(0, 0, 0, 1)">;

    nRetLen </span>= ::MultiByteToWideChar(CP_UTF8, <span style="color: rgba(128, 0, 128, 1)">0</span>, lpUTF8Str, -<span style="color: rgba(128, 0, 128, 1)">1</span>, NULL, NULL);  <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">获取转换到Unicode编码后所需要的字符空间长度</span>
    lpUnicodeStr = <span style="color: rgba(0, 0, 255, 1)">new</span> WCHAR[nRetLen + <span style="color: rgba(128, 0, 128, 1)">1</span>];  <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">为Unicode字符串空间</span>
    nRetLen = ::MultiByteToWideChar(CP_UTF8,<span style="color: rgba(128, 0, 128, 1)">0</span>,(<span style="color: rgba(0, 0, 255, 1)">char</span> *)lpUTF8Str,-<span style="color: rgba(128, 0, 128, 1)">1</span>,lpUnicodeStr,nRetLen);  <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">转换到Unicode编码</span>
    <span style="color: rgba(0, 0, 255, 1)">if</span>(!nRetLen)  <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">转换失败则出错退出</span>
        <span style="color: rgba(0, 0, 255, 1)">return</span> <span style="color: rgba(128, 0, 128, 1)">0</span><span style="color: rgba(0, 0, 0, 1)">;

    nRetLen </span>= ::WideCharToMultiByte(CP_ACP,<span style="color: rgba(128, 0, 128, 1)">0</span>,lpUnicodeStr,-<span style="color: rgba(128, 0, 128, 1)">1</span>,NULL,NULL,NULL,NULL);  <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">获取转换到GBK编码后所需要的字符空间长度</span>

    <span style="color: rgba(0, 0, 255, 1)">if</span>(!lpGBKStr)  <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">输出缓冲区为空则返回转换后需要的空间大小</span>
<span style="color: rgba(0, 0, 0, 1)">    {
        </span><span style="color: rgba(0, 0, 255, 1)">if</span><span style="color: rgba(0, 0, 0, 1)">(lpUnicodeStr)
            </span><span style="color: rgba(0, 0, 255, 1)">delete</span><span style="color: rgba(0, 0, 0, 1)"> []lpUnicodeStr;
        </span><span style="color: rgba(0, 0, 255, 1)">return</span><span style="color: rgba(0, 0, 0, 1)"> nRetLen;
    }

    </span><span style="color: rgba(0, 0, 255, 1)">if</span>(nGBKStrLen &lt; nRetLen)  <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">如果输出缓冲区长度不够则退出</span>
<span style="color: rgba(0, 0, 0, 1)">    {
        </span><span style="color: rgba(0, 0, 255, 1)">if</span><span style="color: rgba(0, 0, 0, 1)">(lpUnicodeStr)
            </span><span style="color: rgba(0, 0, 255, 1)">delete</span><span style="color: rgba(0, 0, 0, 1)"> []lpUnicodeStr;
        </span><span style="color: rgba(0, 0, 255, 1)">return</span> <span style="color: rgba(128, 0, 128, 1)">0</span><span style="color: rgba(0, 0, 0, 1)">;
    }

    nRetLen </span>= ::WideCharToMultiByte(CP_ACP,<span style="color: rgba(128, 0, 128, 1)">0</span>,lpUnicodeStr,-<span style="color: rgba(128, 0, 128, 1)">1</span>,(<span style="color: rgba(0, 0, 255, 1)">char</span> *)lpGBKStr,nRetLen,NULL,NULL);  <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">转换到GBK编码</span>

    <span style="color: rgba(0, 0, 255, 1)">if</span><span style="color: rgba(0, 0, 0, 1)">(lpUnicodeStr)
        </span><span style="color: rgba(0, 0, 255, 1)">delete</span><span style="color: rgba(0, 0, 0, 1)"> []lpUnicodeStr;

    </span><span style="color: rgba(0, 0, 255, 1)">return</span><span style="color: rgba(0, 0, 0, 1)"> nRetLen;
}



</span><span style="color: rgba(0, 0, 255, 1)">char</span> *stringReplaceAll(<span style="color: rgba(0, 0, 255, 1)">char</span> *str, <span style="color: rgba(0, 0, 255, 1)">const</span> <span style="color: rgba(0, 0, 255, 1)">char</span> *strToReplace, <span style="color: rgba(0, 0, 255, 1)">const</span> <span style="color: rgba(0, 0, 255, 1)">char</span> *<span style="color: rgba(0, 0, 0, 1)">strReplaceTo)
{
    size_t cntOld </span>=<span style="color: rgba(0, 0, 0, 1)"> strlen(strToReplace);
    size_t cntNew </span>=<span style="color: rgba(0, 0, 0, 1)"> strlen(strReplaceTo);

    </span><span style="color: rgba(0, 0, 255, 1)">if</span> (cntNew == cntOld &amp;&amp; strcmp(strReplaceTo, strToReplace) == <span style="color: rgba(128, 0, 128, 1)">0</span><span style="color: rgba(0, 0, 0, 1)">)
    {
        </span><span style="color: rgba(0, 0, 255, 1)">return</span><span style="color: rgba(0, 0, 0, 1)"> str;
    }

    </span><span style="color: rgba(0, 0, 255, 1)">if</span> (*strToReplace == <span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">\0</span><span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(0, 0, 0, 1)">)
    {
        </span><span style="color: rgba(0, 0, 255, 1)">return</span><span style="color: rgba(0, 0, 0, 1)"> str;
    }

    </span><span style="color: rgba(0, 0, 255, 1)">char</span> *p =<span style="color: rgba(0, 0, 0, 1)"> strstr(str, strToReplace);
    </span><span style="color: rgba(0, 0, 255, 1)">if</span> (p ==<span style="color: rgba(0, 0, 0, 1)"> NULL)
    {
        </span><span style="color: rgba(0, 0, 255, 1)">return</span><span style="color: rgba(0, 0, 0, 1)"> str;
    }

    vector</span>&lt;<span style="color: rgba(0, 0, 255, 1)">char</span> *&gt;<span style="color: rgba(0, 0, 0, 1)"> vecStrPlace;
    </span><span style="color: rgba(0, 0, 255, 1)">while</span> (p !=<span style="color: rgba(0, 0, 0, 1)"> NULL)
    {
        vecStrPlace.push_back(p);
        p </span>= strstr(p + cntOld + <span style="color: rgba(128, 0, 128, 1)">1</span><span style="color: rgba(0, 0, 0, 1)">, strToReplace);
    }

    </span><span style="color: rgba(0, 0, 255, 1)">if</span> (cntOld &lt;<span style="color: rgba(0, 0, 0, 1)"> cntNew)
    {
        </span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">取得尚未移动的最后一个字符位置（包括\0）</span>
        <span style="color: rgba(0, 0, 255, 1)">char</span> *pEnd = p + strlen(p) + <span style="color: rgba(128, 0, 128, 1)">1</span><span style="color: rgba(0, 0, 0, 1)">;
        size_t n </span>=<span style="color: rgba(0, 0, 0, 1)"> vecStrPlace.size();
        </span><span style="color: rgba(0, 0, 255, 1)">int</span> nMove = n * (cntNew -<span style="color: rgba(0, 0, 0, 1)"> cntOld);
        </span><span style="color: rgba(0, 0, 255, 1)">while</span> (nMove &gt; <span style="color: rgba(128, 0, 128, 1)">0</span><span style="color: rgba(0, 0, 0, 1)">)
        {
            </span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">取得尚未移动的最后一个字符串起始位置</span>
            <span style="color: rgba(0, 0, 255, 1)">char</span> *p = vecStrPlace[n - <span style="color: rgba(128, 0, 128, 1)">1</span>] +<span style="color: rgba(0, 0, 0, 1)"> cntOld;
            </span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">将该位置起至最后一个需要移动的字符一起往后移</span>
            memmove(p, p + nMove, pEnd - p + <span style="color: rgba(128, 0, 128, 1)">1</span><span style="color: rgba(0, 0, 0, 1)">);
            memcpy(p </span>+ nMove -<span style="color: rgba(0, 0, 0, 1)"> cntNew, strReplaceTo, cntNew);
            pEnd </span>= vecStrPlace[n - <span style="color: rgba(128, 0, 128, 1)">1</span>] - <span style="color: rgba(128, 0, 128, 1)">1</span><span style="color: rgba(0, 0, 0, 1)">;
            nMove </span>-= (cntNew -<span style="color: rgba(0, 0, 0, 1)"> cntOld);
            n</span>--<span style="color: rgba(0, 0, 0, 1)">;
        }    
    }
    </span><span style="color: rgba(0, 0, 255, 1)">else</span> <span style="color: rgba(0, 0, 255, 1)">if</span> (cntNew ==<span style="color: rgba(0, 0, 0, 1)"> cntOld)
    {
        </span><span style="color: rgba(0, 0, 255, 1)">for</span> (size_t i = <span style="color: rgba(128, 0, 128, 1)">0</span>; i &lt; vecStrPlace.size(); i++<span style="color: rgba(0, 0, 0, 1)">)
        {
            memcpy(vecStrPlace[i], strReplaceTo, cntNew);
        }
    }
    </span><span style="color: rgba(0, 0, 255, 1)">else</span><span style="color: rgba(0, 0, 0, 1)">
    {
        p </span>= vecStrPlace[<span style="color: rgba(128, 0, 128, 1)">0</span><span style="color: rgba(0, 0, 0, 1)">];
        </span><span style="color: rgba(0, 0, 255, 1)">for</span> (size_t i = <span style="color: rgba(128, 0, 128, 1)">0</span>; i &lt; vecStrPlace.size() - <span style="color: rgba(128, 0, 128, 1)">1</span>; i++<span style="color: rgba(0, 0, 0, 1)">)
        {
            memcpy(p, strReplaceTo, cntNew);
            p </span>+=<span style="color: rgba(0, 0, 0, 1)"> cntNew;
            memmove(p, vecStrPlace[i] </span>+ cntOld, vecStrPlace[i + <span style="color: rgba(128, 0, 128, 1)">1</span>] - vecStrPlace[i] -<span style="color: rgba(0, 0, 0, 1)"> cntOld);
            p </span>+= vecStrPlace[i + <span style="color: rgba(128, 0, 128, 1)">1</span>] - vecStrPlace[i] -<span style="color: rgba(0, 0, 0, 1)"> cntOld;
        }
        memcpy(p, strReplaceTo, cntNew);
        p </span>+=<span style="color: rgba(0, 0, 0, 1)"> cntNew;
        memmove(p, vecStrPlace[vecStrPlace.size() </span>- <span style="color: rgba(128, 0, 128, 1)">1</span>] + cntOld, strlen(vecStrPlace[vecStrPlace.size() - <span style="color: rgba(128, 0, 128, 1)">1</span>] + cntOld) + <span style="color: rgba(128, 0, 128, 1)">1</span><span style="color: rgba(0, 0, 0, 1)">);
    }

    </span><span style="color: rgba(0, 0, 255, 1)">return</span><span style="color: rgba(0, 0, 0, 1)"> str;
}</span></pre>
</div>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>　　</p>
<p>&nbsp;</p>
</div>
<div id="MySignature"></div>
<div class="clear"></div>
<div id="blog_post_info_block">
    <div id="blog_post_info"></div>
    <div class="clear"></div>
    <div id="post_next_prev"></div>
</div>
            </div>
            <div class="postDesc">posted @ 
<span id="post-date">2019-05-19 01:30</span>&nbsp;
<a href="https://www.cnblogs.com/kingstarer/">皇家救星</a>&nbsp;
阅读(<span id="post_view_count">2314</span>)&nbsp;
评论(<span id="post_comment_count">5</span>)&nbsp;
<a href="https://i.cnblogs.com/EditPosts.aspx?postid=10887954" rel="nofollow">编辑</a>&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(10887954);return false;">收藏</a>&nbsp;
<a href="javascript:void(0)" onclick="reportManager.report({ currentUserId: '', targetType: 'blogPost', targetId: '10887954', targetLink: 'https://www.cnblogs.com/kingstarer/p/10887954.html', title: '写了一个工具分析基金回撤，分享实现过程' })">举报</a></div>
        </div>
        <script src="https://common.cnblogs.com/highlight/10.3.1/highlight.min.js"></script>
<script>markdown_highlight();</script>
<script>
    var allowComments = true, cb_blogId = 234136, cb_blogApp = 'kingstarer', cb_blogUserGuid = '6c01f56e-ee22-e511-b908-9dcfd8948a71';
    var cb_entryId = 10887954, cb_entryCreatedDate = '2019-05-19 01:30', cb_postType = 1;
    updatePostStats(
        [cb_entryId],
        function(id, count) { $("#post_view_count").text(count) },
        function(id, count) { $("#post_comment_count").text(count) })
    zoomManager.apply("#cnblogs_post_body img:not(.code_img_closed):not(.code_img_opened)");
</script>
        <a name="!comments"></a>
<div id="blog-comments-placeholder"></div>
<div id="comment_form" class="commentform">
    <a name="commentform"></a>
    <div id="divCommentShow"></div>
    <div id="comment_nav"><span id="span_refresh_tips"></span><a href="javascript:void(0);" onclick="return RefreshCommentList();" id="lnk_RefreshComments" runat="server" clientidmode="Static">刷新评论</a><a href="#" onclick="return RefreshPage();">刷新页面</a><a href="#top">返回顶部</a></div>
    <div id="comment_form_container"></div>
    <div class="ad_text_commentbox" id="ad_text_under_commentbox"></div>
    <div id="ad_t2"></div>
    <div id="opt_under_post"></div>
    <div id="cnblogs_c1" class="under-post-card">
        <div id='div-gpt-ad-1592365906576-0' style='width: 300px; height: 250px;'></div>
    </div>
    <div id="under_post_card1"></div>
    <div id="cnblogs_c2" class="under-post-card">
        <div id='div-gpt-ad-1592366332455-0' style='width: 468px; height: 60px;'></div>
    </div>
    <div id="under_post_card2"></div>
    <div id="HistoryToday" class="under-post-card"></div>
    <script type="text/javascript">
       var commentManager = new blogCommentManager();
       commentManager.renderComments(0);
       fixPostBody();
       deliverBigBanner();
setTimeout(function() { incrementViewCount(cb_entryId); }, 50);       deliverT2();
       deliverC1C2();
       loadNewsAndKb();
       loadBlogSignature();
LoadPostCategoriesTags(cb_blogId, cb_entryId);       LoadPostInfoBlock(cb_blogId, cb_entryId, cb_blogApp, cb_blogUserGuid);
       GetPrevNextPost(cb_entryId, cb_blogId, cb_entryCreatedDate, cb_postType);
       loadOptUnderPost();
       GetHistoryToday(cb_blogId, cb_blogApp, cb_entryCreatedDate);
    </script>
</div>

    </div>
</div>
            </div>
        </div>

        <div id="sideBar">
            <div id="sideBarMain">
                <div id="sidebar_news" class="newsItem">
            <script>loadBlogNews();</script>
</div>
<div id="sidebar_c3"></div>
                <div id="calendar"><div id="blog-calendar" style="display:none"></div></div>                
                <script>loadBlogDefaultCalendar();</script>
                <div id="leftcontentcontainer">
                    <!-- begin:SingleColumn -->
                    <div id="blog-sidecolumn"></div>
                    <script>loadBlogSideColumn();</script>
                    <!-- end:  SingleColumn -->
                </div>
            </div>
        </div>
        <div class="clear"></div>
    </div>
    <div class="clear"></div>
    <div id="footer">
        <!--done-->
Copyright &copy; 2021 皇家救星
<br /><span id="poweredby">Powered by .NET 5.0 on Kubernetes</span>

    </div>
</div>

    

    <input type="hidden" id="antiforgery_token" value="CfDJ8L-rpLgFVEJMgssCVvNUAjtuLeFcRcQj3Yvq02EovWO9VhUS7xJY0SMTOHgBuf8kRrw6jKpt8nDBsinfnk8khI9R4OeOCcFnHAUR7qJ1LSIJkaRxydV1ltnYpBQTnH6cGmkU0ODaw9iUcVyYP2iu-vM" />
</body>
</html>
